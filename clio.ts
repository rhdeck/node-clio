/**
 * This file was auto-generated by swagger-to-ts.
 * Do not make direct changes to the file.
 */

export interface components {
  schemas: {
    EventDetail: {
      /**
       * Type of event
       */
      event_type: string;
      /**
       * The time this event occurred (as a ISO-8601 timestamp)
       */
      time: string;
    };
    ErrorDetail: {
      /**
       * Unique name for this error
       */
      type: string;
      /**
       * Detailed message about the error
       */
      message: string;
    };
    Error: { error: components["schemas"]["ErrorDetail"] };
    IdsResponse: {
      /**
       * A list of ids
       */
      data: { [key: string]: any }[];
    };
    BankTransfer_base: {
      /**
       * Unique identifier for the *BankTransfer*
       */
      id?: number;
      /**
       * ETag for the *BankTransfer*
       */
      etag?: string;
      /**
       * The amount of the transfer.
       */
      amount?: number;
      /**
       * The date of the transfer.
       */
      date?: string;
      /**
       * The description of the transfer.
       */
      description?: string;
    };
    BankTransfer: components["schemas"]["BankTransfer_base"] & {
      client?: components["schemas"]["Contact_base"];
      matter?: components["schemas"]["Matter_base"];
      source_account?: components["schemas"]["BankAccount_base"];
      destination_account?: components["schemas"]["BankAccount_base"];
    };
    BankTransfer_Events: {
      record?: components["schemas"]["BankTransfer"];
      events?: components["schemas"]["EventDetail"][];
    };
    BankTransferShow: { data: components["schemas"]["BankTransfer"] };
    BillRecipient_base: {
      /**
       * The time the *BillRecipient* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * ETag for the *BillRecipient*
       */
      etag?: string;
      /**
       * Unique identifier for the *BillRecipient*
       */
      id?: number;
      /**
       * If the associated contact is a recipient for all of the bill's matters
       */
      on_all_matters?: boolean;
      /**
       * The time the *BillRecipient* was updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    BillRecipient: components["schemas"]["BillRecipient_base"] & {
      recipient?: components["schemas"]["BillRecipient_Contact_base"];
    };
    BillRecipient_Events: {
      record?: components["schemas"]["BillRecipient"];
      events?: components["schemas"]["EventDetail"][];
    };
    BillRecipient_Contact_base: {
      /**
       * Unique identifier for the *Contact*
       */
      id?: number;
      /**
       * The full name of the *Contact*
       */
      name?: string;
      /**
       * First name of the Person
       */
      first_name?: string;
      /**
       * Middle name of the Person
       */
      middle_name?: string;
      /**
       * Last name of the Person
       */
      last_name?: string;
      /**
       * The type of the *Contact*
       */
      type?: "Company" | "Person";
      /**
       * The primary email address associated with this *Contact*.
       */
      primary_email_address?: string;
    };
    ConversationMessage_base: {
      /**
       * Unique identifier for the *ConversationMessage*
       */
      id?: number;
      /**
       * ETag for the *ConversationMessage*
       */
      etag?: string;
      /**
       * The main content of the *ConversationMessage*
       */
      body?: string;
      /**
       * The time the *ConversationMessage* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *ConversationMessage* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    ConversationMessage: components["schemas"]["ConversationMessage_base"] & {
      sender?: components["schemas"]["Participant_base"];
      document?: components["schemas"]["Document_base"];
      conversation?: components["schemas"]["Conversation_base"];
      /**
       * Participant
       */
      receivers?: components["schemas"]["Participant_base"][];
    };
    ConversationMessage_Events: {
      record?: components["schemas"]["ConversationMessage"];
      events?: components["schemas"]["EventDetail"][];
    };
    ConversationMessageShow: {
      data: components["schemas"]["ConversationMessage"];
    };
    ConversationMessageList: {
      /**
       * ConversationMessage List Response
       */
      data: components["schemas"]["ConversationMessage"][];
    };
    ConversationMessageListEvent: {
      /**
       * ConversationMessage Event List Response
       */
      data: components["schemas"]["ConversationMessage_Events"][];
    };
    CustomAction_base: {
      /**
       * Unique identifier for the *CustomAction*
       */
      id?: number;
      /**
       * ETag for the *CustomAction*
       */
      etag?: string;
      /**
       * The time the *CustomAction* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *CustomAction* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * Text label to be displayed on the custom link.
       */
      label?: string;
      /**
       * Target URL which will be opened in a new tab when the user clicks the custom link.
       */
      target_url?: string;
      /**
       * UI reference location within Clio where the link will be displayed.
       */
      ui_reference?:
        | "activities/show"
        | "documents/show"
        | "contacts/show"
        | "matters/show";
    };
    CustomAction: components["schemas"]["CustomAction_base"] & {
      [key: string]: any;
    };
    CustomAction_Events: {
      record?: components["schemas"]["CustomAction"];
      events?: components["schemas"]["EventDetail"][];
    };
    CustomActionShow: { data: components["schemas"]["CustomAction"] };
    CustomActionList: {
      /**
       * CustomAction List Response
       */
      data: components["schemas"]["CustomAction"][];
    };
    CustomActionListEvent: {
      /**
       * CustomAction Event List Response
       */
      data: components["schemas"]["CustomAction_Events"][];
    };
    WorkReassignment_base: {
      /**
       * Unique identifier for the *WorkReassignment*
       */
      id?: number;
      /**
       * The account.
       */
      account_id?: number;
      /**
       * The person who triggered the work reassignment.
       */
      actor_id?: number;
      /**
       * The user whose work is being reassigned.
       */
      source_user_id?: number;
      /**
       * The user who is receiving the reassigned tasks.
       */
      tasks_user_id?: number;
      /**
       * The user who is receiving the reassigned calendar events.
       */
      calendar_entries_user_id?: number;
      /**
       * The attorney who will be responsible for matters that were previously the responsibility of the deactivated user.
       */
      responsible_attorney_id?: number;
      /**
       * The status of the work reassignment.
       */
      status?: string;
      /**
       * The time the work reassignment was completed.
       */
      completed_at?: string;
      /**
       * The total number of work reassignment steps (equivalent to the number of records being reassigned)
       */
      total_steps?: number;
      /**
       * The number of successfully reassigned records.
       */
      completed_steps?: number;
      /**
       * The time the *WorkReassignment* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *WorkReassignment* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    WorkReassignment: components["schemas"]["WorkReassignment_base"] & {
      /**
       * WorkReassignmentStep
       */
      steps?: components["schemas"]["WorkReassignmentStep_base"][];
    };
    WorkReassignment_Events: {
      record?: components["schemas"]["WorkReassignment"];
      events?: components["schemas"]["EventDetail"][];
    };
    BillableMatter_base: {
      /**
       * Unique identifier for the *BillableMatter*
       */
      id?: number;
      /**
       * The unbilled number of hours for the matter
       */
      unbilled_hours?: number;
      /**
       * The unbilled amount for the matter
       */
      unbilled_amount?: number;
      /**
       * The trust amount available for the matter
       */
      amount_in_trust?: number;
      /**
       * The reference to the matter
       */
      display_number?: string;
    };
    BillableMatter: components["schemas"]["BillableMatter_base"] & {
      client?: components["schemas"]["Contact_base"];
    };
    BillableMatter_Events: {
      record?: components["schemas"]["BillableMatter"];
      events?: components["schemas"]["EventDetail"][];
    };
    BillableMatterShow: { data: components["schemas"]["BillableMatter"] };
    BillableMatterList: {
      /**
       * BillableMatter List Response
       */
      data: components["schemas"]["BillableMatter"][];
    };
    BillableMatterListEvent: {
      /**
       * BillableMatter Event List Response
       */
      data: components["schemas"]["BillableMatter_Events"][];
    };
    LegalAgreementUserAcceptance_base: {
      /**
       * Unique identifier for the *LegalAgreementUserAcceptance*
       */
      id?: number;
      /**
       * ETag for the *LegalAgreementUserAcceptance*
       */
      etag?: string;
      /**
       * Where the legal agreement user acceptance came from
       */
      provider?: string;
      /**
       * The time the *LegalAgreementUserAcceptance* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *LegalAgreementUserAcceptance* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    LegalAgreementUserAcceptance: components["schemas"]["LegalAgreementUserAcceptance_base"] & {
      [key: string]: any;
    };
    LegalAgreementUserAcceptance_Events: {
      record?: components["schemas"]["LegalAgreementUserAcceptance"];
      events?: components["schemas"]["EventDetail"][];
    };
    Conversation_base: {
      /**
       * Unique identifier for the *Conversation*
       */
      id?: number;
      /**
       * ETag for the *Conversation*
       */
      etag?: string;
      /**
       * The subject of the *Conversation*
       */
      subject?: string;
      /**
       * The time the *Conversation* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Conversation* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    Conversation: components["schemas"]["Conversation_base"] & {
      last_message?: components["schemas"]["ConversationMessage_base"];
      first_message?: components["schemas"]["ConversationMessage_base"];
      matter?: components["schemas"]["Matter_base"];
      /**
       * ConversationMembership
       */
      memberships?: components["schemas"]["ConversationMembership"][];
    };
    Conversation_Events: {
      record?: components["schemas"]["Conversation"];
      events?: components["schemas"]["EventDetail"][];
    };
    ConversationShow: { data: components["schemas"]["Conversation"] };
    ConversationList: {
      /**
       * Conversation List Response
       */
      data: components["schemas"]["Conversation"][];
    };
    ConversationListEvent: {
      /**
       * Conversation Event List Response
       */
      data: components["schemas"]["Conversation_Events"][];
    };
    BusinessAddress_base: {
      /**
       * Unique identifier for the *BusinessAddress*
       */
      id?: number;
      /**
       * Unit number and street name
       */
      address?: string;
      /**
       * Country
       */
      country?: string;
      /**
       * Zip code or postal code
       */
      postal_code?: string;
      /**
       * City
       */
      city?: string;
      /**
       * State or province
       */
      province?: string;
    };
    BusinessAddress: components["schemas"]["BusinessAddress_base"] & {
      [key: string]: any;
    };
    BusinessAddress_Events: {
      record?: components["schemas"]["BusinessAddress"];
      events?: components["schemas"]["EventDetail"][];
    };
    TrustRequest_base: {
      /**
       * Unique identifier for the *TrustRequest*
       */
      id?: number;
      /**
       * ETag for the *TrustRequest*
       */
      etag?: string;
    };
    TrustRequest: components["schemas"]["TrustRequest_base"] & {
      [key: string]: any;
    };
    TrustRequest_Events: {
      record?: components["schemas"]["TrustRequest"];
      events?: components["schemas"]["EventDetail"][];
    };
    TrustRequestShow: { data: components["schemas"]["TrustRequest"] };
    MyEvent_base: { [key: string]: any };
    MyEvent: components["schemas"]["MyEvent_base"] & {
      event?: components["schemas"]["Event_base"];
    };
    MyEvent_Events: {
      record?: components["schemas"]["MyEvent"];
      events?: components["schemas"]["EventDetail"][];
    };
    MyEventShow: { data: components["schemas"]["MyEvent"] };
    MyEventList: {
      /**
       * MyEvent List Response
       */
      data: components["schemas"]["MyEvent"][];
    };
    MyEventListEvent: {
      /**
       * MyEvent Event List Response
       */
      data: components["schemas"]["MyEvent_Events"][];
    };
    Event_base: {
      /**
       * Unique identifier for the *Event*
       */
      id?: number;
      /**
       * ETag for the *Event*
       */
      etag?: string;
      /**
       * Concise headline message describing the event
       */
      message?: string;
      /**
       * Font Awesome icon to display (without the fa- prefix)
       */
      icon?: string;
      /**
       * The title or subject of the event (e.g. Matter Number, Document Title)
       */
      title?: string;
      /**
       * Target URL that will be opened if the user clicks on the event title
       */
      title_url?: string;
      /**
       * Description or additional information about the event (e.g. Matter Description)
       */
      description?: string;
      /**
       * Target URL that will be opened if the user clicks on the event description
       */
      description_url?: string;
      /**
       * Optional additional information about the event (e.g. Matter Client, Document Author)
       */
      primary_detail?: string;
      /**
       * Target URL that will be opened if the user clicks on the primary detail
       */
      primary_detail_url?: string;
      /**
       * Optional additional information about the event (e.g. Matter Status, Document Size)
       */
      secondary_detail?: string;
      /**
       * Target URL that will be opened if the user clicks on the secondary detail
       */
      secondary_detail_url?: string;
      /**
       * When the event occurred
       */
      occurred_at?: string;
      /**
       * Icon to be displayed in the mobile app
       */
      mobile_icon?: string;
      /**
       * The type of subject that triggered the notification (e.g. Matter, Document)
       */
      subject_type?: string;
      /**
       * Id of the subject that triggered the notification
       */
      subject_id?: number;
    };
    Event: components["schemas"]["Event_base"] & { [key: string]: any };
    Event_Events: {
      record?: components["schemas"]["Event"];
      events?: components["schemas"]["EventDetail"][];
    };
    CustomFieldConversion_base: {
      /**
       * Unique identifier for the *CustomFieldConversion*
       */
      id?: number;
      /**
       * ETag for the *CustomFieldConversion*
       */
      etag?: string;
      /**
       * The time the *CustomFieldConversion* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *CustomFieldConversion* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * Date the *CustomFieldConversion* was completed
       */
      completed_at?: string;
      /**
       * Which field is set to receive the value of the custom field
       */
      destination_field?: "contact_middle_name";
      /**
       * The name of the custom field,
       */
      custom_field_name?: string;
      /**
       * The state of the *CustomFieldConversion*
       */
      state?:
        | "enqueued"
        | "in_progress"
        | "partial_complete"
        | "complete"
        | "failed";
      /**
       * The number of records that has been processed
       */
      processed_records?: number;
      /**
       * The number of errors that happened during processing
       */
      errors_count?: number;
      /**
       * The total number of records that need to be processed
       */
      total_records?: number;
    };
    CustomFieldConversion: components["schemas"]["CustomFieldConversion_base"] & {
      custom_field?: components["schemas"]["CustomField_base"];
      user?: components["schemas"]["User_base"];
    };
    CustomFieldConversion_Events: {
      record?: components["schemas"]["CustomFieldConversion"];
      events?: components["schemas"]["EventDetail"][];
    };
    EventMetrics_base: {
      /**
       * The number of unread mobile event notifications for the current user
       */
      unread_mobile_events?: number;
      /**
       * The number of unread web event notifications for the current user
       */
      unread_web_events?: number;
      /**
       * The number of unread secure messages for the current user
       */
      unread_secure_messages?: number;
    };
    EventMetrics: components["schemas"]["EventMetrics_base"] & {
      [key: string]: any;
    };
    EventMetrics_Events: {
      record?: components["schemas"]["EventMetrics"];
      events?: components["schemas"]["EventDetail"][];
    };
    EventMetricsShow: { data: components["schemas"]["EventMetrics"] };
    MyMobileEvent_base: { [key: string]: any };
    MyMobileEvent: components["schemas"]["MyMobileEvent_base"] & {
      event?: components["schemas"]["Event_base"];
    };
    MyMobileEvent_Events: {
      record?: components["schemas"]["MyMobileEvent"];
      events?: components["schemas"]["EventDetail"][];
    };
    OutstandingClientBalance_base: {
      /**
       * An array of Matter IDs associated with bills in the unpaid state
       */
      associated_matter_ids?: number[];
      /**
       * ETag for the *OutstandingClientBalance*
       */
      etag?: string;
      /**
       * Unique identifier for the *OutstandingClientBalance*
       */
      id?: number;
      /**
       * The date the most recent payment from the contact was received
       */
      last_payment_date?: string;
      /**
       * The date of the most recently shared bills through the outstanding balance table
       */
      last_shared_date?: string;
      /**
       * The due date of the contact's newest bill
       */
      newest_issued_bill_due_date?: string;
      /**
       * The sum of all Clio Payments in a pending state on the outstanding bills
       */
      pending_payments_total?: number;
      /**
       * The sum of all bills in the unpaid state
       */
      total_outstanding_balance?: number;
    };
    OutstandingClientBalance: components["schemas"]["OutstandingClientBalance_base"] & {
      /**
       * Bill
       */
      outstanding_bills?: components["schemas"]["Bill_base"][];
      contact?: components["schemas"]["Contact_base"];
      currency?: components["schemas"]["Currency_base"];
    };
    OutstandingClientBalance_Events: {
      record?: components["schemas"]["OutstandingClientBalance"];
      events?: components["schemas"]["EventDetail"][];
    };
    OutstandingClientBalanceList: {
      /**
       * OutstandingClientBalance List Response
       */
      data: components["schemas"]["OutstandingClientBalance"][];
    };
    OutstandingClientBalanceListEvent: {
      /**
       * OutstandingClientBalance Event List Response
       */
      data: components["schemas"]["OutstandingClientBalance_Events"][];
    };
    MicrosoftTeamsAccount_base: {
      /**
       * Unique identifier for the *MicrosoftTeamsAccount*
       */
      id?: number;
      /**
       * ETag for the *MicrosoftTeamsAccount*
       */
      etag?: string;
      /**
       * Whether or not the Microsoft Teams integration is enabled
       */
      enabled?: boolean;
    };
    MicrosoftTeamsAccount: components["schemas"]["MicrosoftTeamsAccount_base"] & {
      [key: string]: any;
    };
    MicrosoftTeamsAccount_Events: {
      record?: components["schemas"]["MicrosoftTeamsAccount"];
      events?: components["schemas"]["EventDetail"][];
    };
    BankAccount_base: {
      /**
       * The account number for *BankAccount*
       */
      account_number?: string;
      /**
       * The current balance of the *BankAccount*
       */
      balance?: number;
      /**
       * The number of bank transactions associated with the account.
       */
      bank_transactions_count?: number;
      /**
       * Link to Single Payment Page which allows to transfer funds without logging in.
       */
      clio_payment_page_link?: string;
      /**
       * The time the *BankAccount* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The currency type of the *BankAccount*
       */
      currency?: string;
      /**
       * Whether it is the default account
       */
      default_account?: boolean;
      /**
       * The name of the branch where the account was opened
       */
      domicile_branch?: string;
      /**
       * ETag for the *BankAccount*
       */
      etag?: string;
      /**
       * General ledger number
       */
      general_ledger_number?: string;
      /**
       * The name of the person or business that owns the *BankAccount*
       */
      holder?: string;
      /**
       * Unique identifier for the *BankAccount*
       */
      id?: number;
      /**
       * The financial institution where the *BankAccount* is registered
       */
      institution?: string;
      /**
       * The name of the *BankAccount*
       */
      name?: string;
      /**
       * A unique identification code for the financial institution
       */
      swift?: string;
      /**
       * Transit number for the bank account branch
       */
      transit_number?: string;
      /**
       * The type of the *BankAccount*
       */
      type?: "Operating" | "Trust";
      /**
       * The time the *BankAccount* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    BankAccount: components["schemas"]["BankAccount_base"] & {
      user?: components["schemas"]["User_base"];
      clio_payments_merchant_account_mapping?: components["schemas"]["ClioPaymentsMerchantAccountMapping_base"];
    };
    BankAccount_Events: {
      record?: components["schemas"]["BankAccount"];
      events?: components["schemas"]["EventDetail"][];
    };
    BankAccountShow: { data: components["schemas"]["BankAccount"] };
    BankAccountList: {
      /**
       * BankAccount List Response
       */
      data: components["schemas"]["BankAccount"][];
    };
    BankAccountListEvent: {
      /**
       * BankAccount Event List Response
       */
      data: components["schemas"]["BankAccount_Events"][];
    };
    LegalAidUkBill_base: {
      /**
       * Additional travel payment, for Legal Aid UK only
       */
      additional_travel_payment?: boolean;
      /**
       * Adjourned hearing fee; for Legal Aid UK only
       */
      adjourned_hearing_fee?: string;
      /**
       * Bill type; for Legal Aid UK only
       */
      bill_type?: number;
      /**
       * Case concluded; for Legal Aid UK only
       */
      case_concluded?: string;
      /**
       * Case stage level; for Legal Aid UK only
       */
      case_stage_level?: number;
      /**
       * CLA reference; for Legal Aid UK only
       */
      cla_reference?: string;
      /**
       * CMRH oral; for Legal Aid UK only
       */
      cmrh_oral?: number;
      /**
       * CMRH telephone; for Legal Aid UK only
       */
      cmrh_telephone?: number;
      /**
       * Court location; for Legal Aid UK only
       */
      court_location?: string;
      /**
       * Date of claim; for Legal Aid UK only
       */
      date_of_claim?: string;
      /**
       * Designated accredited representative; for Legal Aid UK only
       */
      designated_accredited_representative?: number;
      /**
       * Detention travel and waiting costs; for Legal Aid UK only
       */
      detention_travel_and_waiting_costs?: string;
      /**
       * Exceptional case funding reference; for Legal Aid UK only
       */
      exceptional_case_funding_reference?: string;
      /**
       * Exemption criteria satisfied; for Legal Aid UK only
       */
      exemption_criteria_satisfied?: number;
      /**
       * HO interview; for Legal Aid UK only
       */
      ho_interview?: number;
      /**
       * HO UCN; for Legal Aid UK only
       */
      ho_ucn?: number;
      /**
       * Unique identifier for the *LegalAidUkBill*
       */
      id?: number;
      /**
       * Independent medical reports claimed; for Legal Aid UK only
       */
      independent_medical_reports_claimed?: string;
      /**
       * JR form filling, for Legal Aid UK only
       */
      jr_form_filling?: string;
      /**
       * Matter type 1; for Legal Aid UK only
       */
      matter_type_1?: number;
      /**
       * Matter type 2; for Legal Aid UK only
       */
      matter_type_2?: number;
      /**
       * Meetings attended; for Legal Aid UK only
       */
      meetings_attended?: string;
      /**
       * Mental health tribunal reference; for Legal Aid UK only
       */
      mental_health_tribunal_reference?: string;
      /**
       * NIAT disbursement prior authority number; for Legal Aid UK only
       */
      niat_disbursement_prior_authority_number?: string;
      /**
       * Outcome for the client; for Legal Aid UK only
       */
      outcome_for_the_client?: number;
      /**
       * Prior authority reference; for Legal Aid UK only
       */
      prior_authority_reference?: string;
      /**
       * Stage reached; for Legal Aid UK only
       */
      stage_reached?: number;
      /**
       * Substantive hearing; for Legal Aid UK only
       */
      substantive_hearing?: number;
      /**
       * Value of costs; for Legal Aid UK only
       */
      value_of_costs?: string;
    };
    LegalAidUkBill: components["schemas"]["LegalAidUkBill_base"] & {
      account?: components["schemas"]["Account_base"];
      bill?: components["schemas"]["Bill_base"];
    };
    LegalAidUkBill_Events: {
      record?: components["schemas"]["LegalAidUkBill"];
      events?: components["schemas"]["EventDetail"][];
    };
    AutocompleteSearch_base: { [key: string]: any };
    AutocompleteSearch: components["schemas"]["AutocompleteSearch_base"] & {
      /**
       * ContactResult
       */
      contacts?: components["schemas"]["ContactResult_base"][];
      /**
       * MatterResult
       */
      matters?: components["schemas"]["MatterResult_base"][];
    };
    AutocompleteSearch_Events: {
      record?: components["schemas"]["AutocompleteSearch"];
      events?: components["schemas"]["EventDetail"][];
    };
    GlobalSearch_base: { [key: string]: any };
    GlobalSearch: components["schemas"]["GlobalSearch_base"] & {
      /**
       * ActivityResult
       */
      activities?: components["schemas"]["ActivityResult_base"][];
      /**
       * CalendarEntryResult
       */
      calendar_entries?: components["schemas"]["CalendarEntryResult_base"][];
      /**
       * CommunicationResult
       */
      communications?: components["schemas"]["CommunicationResult_base"][];
      /**
       * ContactResult
       */
      contacts?: components["schemas"]["ContactResult_base"][];
      /**
       * DocumentResult
       */
      documents?: components["schemas"]["DocumentResult_base"][];
      /**
       * DocumentContentsResult
       */
      document_contents?: components["schemas"]["DocumentContentsResult_base"][];
      /**
       * MatterResult
       */
      matters?: components["schemas"]["MatterResult_base"][];
      /**
       * NoteResult
       */
      notes?: components["schemas"]["NoteResult_base"][];
      /**
       * TaskResult
       */
      tasks?: components["schemas"]["TaskResult_base"][];
    };
    GlobalSearch_Events: {
      record?: components["schemas"]["GlobalSearch"];
      events?: components["schemas"]["EventDetail"][];
    };
    BulkBill_base: {
      /**
       * Unique identifier for the *BulkBill*
       */
      id?: number;
      /**
       * ETag for the *BulkBill*
       */
      etag?: string;
      /**
       * Unique identifier for the *BulkBill*'s group
       */
      group_id?: number;
      /**
       * The current status of the *BulkBill* request
       */
      status?: "pending" | "working" | "finished" | "error";
      /**
       * The number of bills created
       */
      completed?: number;
      /**
       * The total number of bills requested
       */
      total?: number;
      /**
       * The ids of the bills created
       */
      bill_ids?: number;
    };
    BulkBill: components["schemas"]["BulkBill_base"] & { [key: string]: any };
    BulkBill_Events: {
      record?: components["schemas"]["BulkBill"];
      events?: components["schemas"]["EventDetail"][];
    };
    TrustPayment_base: {
      /**
       * Unique identifier for the *TrustPayment*
       */
      id?: number;
      /**
       * ETag for the *TrustPayment*
       */
      etag?: string;
      /**
       * A detailed description of the *TrustPayment*
       */
      description?: string;
      /**
       * Total amount paid. The default is 0.00.
       */
      amount?: number;
      /**
       * The date the *TrustPayment* was recorded (as a ISO-8601 date)
       */
      date?: string;
      /**
       * The time the *TrustPayment* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *TrustPayment* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * Whether this *TrustPayment* is associated with an online payment or not
       */
      has_online_payment?: boolean;
    };
    TrustPayment: components["schemas"]["TrustPayment_base"] & {
      matter?: components["schemas"]["Matter_base"];
      destination_account?: components["schemas"]["BankAccount_base"];
      bill?: components["schemas"]["Bill_base"];
    };
    TrustPayment_Events: {
      record?: components["schemas"]["TrustPayment"];
      events?: components["schemas"]["EventDetail"][];
    };
    Discount_base: {
      /**
       * The rate of the *Discount%*
       */
      rate?: number;
      /**
       * The type of *Discount* being applied in your *Discount* rate.
       */
      type?: "percentage" | "money";
      /**
       * A note for your *Discount*
       */
      note?: string;
      /**
       * The % discount that will be applied if your *Discount* is paid within the early payment period.
       */
      early_payment_rate?: number;
      /**
       * The number of days for your *Discount* period. If your bill is paid within this time, apply your *Discount* rate to the bill.
       */
      early_payment_period?: number;
    };
    Discount: components["schemas"]["Discount_base"] & { [key: string]: any };
    Discount_Events: {
      record?: components["schemas"]["Discount"];
      events?: components["schemas"]["EventDetail"][];
    };
    LogEntry_base: {
      /**
       * Unique identifier for the *LogEntry*
       */
      id?: number;
      /**
       * The type of the *LogEntry*
       */
      type?: "MatterLogEntry" | "ContactLogEntry";
      /**
       * The time the item was last accessed (as a ISO-8601 timestamp)
       */
      accessed_at?: string;
    };
    LogEntry: components["schemas"]["LogEntry_base"] & {
      item?: components["schemas"]["PolymorphicObject_base"];
      user?: components["schemas"]["User_base"];
    };
    LogEntry_Events: {
      record?: components["schemas"]["LogEntry"];
      events?: components["schemas"]["EventDetail"][];
    };
    LogEntryList: {
      /**
       * LogEntry List Response
       */
      data: components["schemas"]["LogEntry"][];
    };
    LogEntryListEvent: {
      /**
       * LogEntry Event List Response
       */
      data: components["schemas"]["LogEntry_Events"][];
    };
    ClientApplication_base: {
      /**
       * Unique identifier for the *ClientApplication*
       */
      id?: number;
      /**
       * ETag for the *ClientApplication*
       */
      etag?: string;
      /**
       * The name of the *ClientApplication*
       */
      name?: string;
      /**
       * A detailed description of the developer application
       */
      description?: string;
      /**
       * Whether the application are made publicly available in the Clio Apps listing
       */
      public?: boolean;
      /**
       * Whether the application is approved and available for use
       */
      approved?: boolean;
      /**
       * URL to your company website
       */
      url?: string;
      /**
       * URL to your support website
       */
      support_url?: string;
      /**
       * A list of valid callback URIs, separated by a new line, that a token can be returned to
       */
      registered_redirect_uris?: string;
      /**
       * The key to be used in the OAuth workflow
       */
      key?: string;
      /**
       * Whether an application in enabled
       */
      enabled?: boolean;
      /**
       * Whether Clio mobile applications are Android and iOS applications
       */
      clio_mobile_application?: boolean;
      /**
       * The time the *ClientApplication* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *ClientApplication* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The code representing the header state. Possible values are 0,1,2 and map to None, Clio Application, and Clio Partner, respectively
       */
      header_state_code?: number;
      /**
       * Indicates where the application is listed in the Clio Apps menu
       */
      header_state?: "Clio Partner" | "Clio Application" | "None";
      /**
       * Whether the developer application is listed in the sidebar
       */
      add_to_sidebar?: boolean;
      /**
       * The date the developer Terms of Service was accepted on
       */
      tos_accepted_at?: string;
      /**
       * The IP address used when accepting the developer Terms of Service
       */
      tos_ip_address?: string;
      /**
       * Which parts of API the application has read or write access for
       */
      permission?: number;
      /**
       * How many requests per minute the application is allowed to make
       */
      rate_limit?: number;
    };
    ClientApplication: components["schemas"]["ClientApplication_base"] & {
      account?: components["schemas"]["Account_base"];
      tos_user?: components["schemas"]["User_base"];
    };
    ClientApplication_Events: {
      record?: components["schemas"]["ClientApplication"];
      events?: components["schemas"]["EventDetail"][];
    };
    PolymorphicCustomRate_base: {
      /**
       * The unique identifier for the custom rate
       */
      id?: number;
      /**
       * If `custom_rate.type` is `HourlyRate`, it is the dollar amount of the custom rate of the User or Group for the Matter.
       *
       * If `custom_rate.type` is `FlatRate`, it is the dollar amount of the custom flat rate for the Matter.
       *
       * If `custom_rate.type` is `ContingencyFee`, it is the percentage of the contingency fee awarded to the user for the Matter. The value may also be expressed as string that represents a rational number such as `1/3`.
       *
       * If the user does not have sufficient rate visibility, the rates are hidden.
       */
      rate?: number;
      /**
       * The value of the ContingencyFee award.
       */
      award?: number;
      /**
       * Details about the ContingencyFee award.
       */
      note?: string;
      /**
       * The date of the ContingencyFee award.
       */
      date?: string;
    };
    PolymorphicCustomRate: components["schemas"]["PolymorphicCustomRate_base"] & {
      user?: components["schemas"]["PolymorphicCustomRate_User_base"];
      group?: components["schemas"]["PolymorphicCustomRate_Group_base"];
      activity_description?: components["schemas"]["PolymorphicCustomRate_ActivityDescription_base"];
    };
    PolymorphicCustomRate_Events: {
      record?: components["schemas"]["PolymorphicCustomRate"];
      events?: components["schemas"]["EventDetail"][];
    };
    PolymorphicCustomRate_User_base: {
      /**
       * Whether the *User* is allowed to log in
       */
      enabled?: boolean;
      /**
       * ETag for the *User*
       */
      etag?: string;
      /**
       * Unique identifier for the *User*
       */
      id?: number;
      /**
       * The full name of the *User*
       */
      name?: string;
    };
    PolymorphicCustomRate_Group_base: {
      /**
       * Unique identifier for the *Group*
       */
      id?: number;
      /**
       * ETag for the *Group*
       */
      etag?: string;
      /**
       * The name of the *Group*
       */
      name?: string;
    };
    PolymorphicCustomRate_ActivityDescription_base: {
      /**
       * Unique identifier for the *ActivityDescription*
       */
      id?: number;
      /**
       * ETag for the *ActivityDescription*
       */
      etag?: string;
      /**
       * The name of the *ActivityDescription*
       */
      name?: string;
    };
    MatterContacts_base: {
      /**
       * Timestamp of the time the contact was created
       */
      contact_created_at?: string;
      /**
       * Timestamp of the time the contact was created
       */
      contact_updated_at?: string;
      /**
       * The time the *MatterContacts* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * Description of the matter
       */
      description?: string;
      /**
       * ETag for the *MatterContacts*
       */
      etag?: string;
      /**
       * First name of the Person
       */
      first_name?: string;
      /**
       * Unique identifier for the *MatterContacts*
       */
      id?: number;
      /**
       * The initials of the *MatterContacts*
       */
      initials?: string;
      /**
       * Whether or not the MatterContacts is a client
       */
      is_client?: boolean;
      /**
       * Last name of the Person
       */
      last_name?: string;
      /**
       * ID of the matter
       */
      matter_id?: number;
      /**
       * Number of the matter
       */
      matter_number?: string;
      /**
       * Middle name of the Person
       */
      middle_name?: string;
      /**
       * The full name of the *MatterContacts*
       */
      name?: string;
      /**
       * The prefix of the *MatterContacts* (Mr, Mrs, etc)
       */
      prefix?: string;
      /**
       * The primary email address associated with this *MatterContacts*.
       */
      primary_email_address?: string;
      /**
       * The primary phone number associated with this *MatterContacts*.
       */
      primary_phone_number?: string;
      /**
       * The description of the relation between the contact and the matter, or "Client" if the user is the client.
       */
      relationship_name?: string;
      /**
       * The secondary email address of the contact
       */
      secondary_email_address?: string;
      /**
       * The secondary phone number of the contact
       */
      secondary_phone_number?: string;
      /**
       * The designated title of the *MatterContacts*
       */
      title?: string;
      /**
       * The type of the *MatterContacts*
       */
      type?: "Company" | "Person";
      /**
       * The time the *MatterContacts* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    MatterContacts: components["schemas"]["MatterContacts_base"] & {
      relationship?: components["schemas"]["Relationship_base"];
      avatar?: components["schemas"]["Avatar_base"];
      company?: components["schemas"]["Contact_base"];
      primary_address?: components["schemas"]["Address_base"];
      primary_web_site?: components["schemas"]["WebSite_base"];
      secondary_address?: components["schemas"]["Address_base"];
      secondary_web_site?: components["schemas"]["WebSite_base"];
      /**
       * Address
       */
      addresses?: components["schemas"]["Address_base"][];
      /**
       * EmailAddress
       */
      email_addresses?: components["schemas"]["EmailAddress_base"][];
      /**
       * PhoneNumber
       */
      phone_numbers?: components["schemas"]["PhoneNumber_base"][];
      /**
       * WebSite
       */
      web_sites?: components["schemas"]["WebSite_base"][];
      /**
       * CustomFieldValue
       */
      custom_field_values?: components["schemas"]["CustomFieldValue_base"][];
    };
    MatterContacts_Events: {
      record?: components["schemas"]["MatterContacts"];
      events?: components["schemas"]["EventDetail"][];
    };
    MatterContactsList: {
      /**
       * MatterContacts List Response
       */
      data: components["schemas"]["MatterContacts"][];
    };
    MatterContactsListEvent: {
      /**
       * MatterContacts Event List Response
       */
      data: components["schemas"]["MatterContacts_Events"][];
    };
    TimelineEvent_base: { [key: string]: any };
    TimelineEvent: components["schemas"]["TimelineEvent_base"] & {
      [key: string]: any;
    };
    TimelineEvent_Events: {
      record?: components["schemas"]["TimelineEvent"];
      events?: components["schemas"]["EventDetail"][];
    };
    RelatedContacts_base: {
      /**
       * Unique identifier for the *RelatedContacts*
       */
      id?: number;
      /**
       * The id of the *RelatedContacts*
       */
      contact_id?: number;
      /**
       * The full name of the *RelatedContacts*
       */
      name?: string;
      /**
       * First name of the Person
       */
      first_name?: string;
      /**
       * Middle name of the Person
       */
      middle_name?: string;
      /**
       * Last name of the Person
       */
      last_name?: string;
      /**
       * The type of the *RelatedContacts*
       */
      type?: "Company" | "Person";
      /**
       * The time the *RelatedContacts* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *RelatedContacts* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The prefix of the *RelatedContacts* (Mr, Mrs, etc)
       */
      prefix?: string;
      /**
       * The designated title of the *RelatedContacts*
       */
      title?: string;
      /**
       * The initials of the *RelatedContacts*
       */
      initials?: string;
      /**
       * Whether or not the RelatedContacts is also the client of the matter
       */
      is_matter_client?: boolean;
      /**
       * The primary email address of related contact
       */
      primary_email_address?: string;
      /**
       * The primary phone number of related contact
       */
      primary_phone_number?: string;
    };
    RelatedContacts: components["schemas"]["RelatedContacts_base"] & {
      relationship?: components["schemas"]["Relationship_base"];
      avatar?: components["schemas"]["Avatar_base"];
      company?: components["schemas"]["Contact_base"];
      primary_address?: components["schemas"]["Address_base"];
      primary_web_site?: components["schemas"]["WebSite_base"];
      secondary_address?: components["schemas"]["Address_base"];
      secondary_web_site?: components["schemas"]["WebSite_base"];
      /**
       * Address
       */
      addresses?: components["schemas"]["Address_base"][];
      /**
       * EmailAddress
       */
      email_addresses?: components["schemas"]["EmailAddress_base"][];
      /**
       * PhoneNumber
       */
      phone_numbers?: components["schemas"]["PhoneNumber_base"][];
      /**
       * WebSite
       */
      web_sites?: components["schemas"]["WebSite_base"][];
      /**
       * CustomFieldValue
       */
      custom_field_values?: components["schemas"]["CustomFieldValue_base"][];
    };
    RelatedContacts_Events: {
      record?: components["schemas"]["RelatedContacts"];
      events?: components["schemas"]["EventDetail"][];
    };
    RelatedContactsList: {
      /**
       * RelatedContacts List Response
       */
      data: components["schemas"]["RelatedContacts"][];
    };
    RelatedContactsListEvent: {
      /**
       * RelatedContacts Event List Response
       */
      data: components["schemas"]["RelatedContacts_Events"][];
    };
    Client_base: {
      /**
       * Unique identifier for the *Client*
       */
      id?: number;
      /**
       * The full name of the *Client*
       */
      name?: string;
      /**
       * First name of the Person
       */
      first_name?: string;
      /**
       * Middle name of the Person
       */
      middle_name?: string;
      /**
       * Last name of the Person
       */
      last_name?: string;
      /**
       * The type of the *Client*
       */
      type?: "Company" | "Person";
      /**
       * The time the *Client* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Client* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The prefix of the *Client* (Mr, Mrs, etc)
       */
      prefix?: string;
      /**
       * The designated title of the *Client*
       */
      title?: string;
      /**
       * The initials of the *Client*
       */
      initials?: string;
      /**
       * Whether or not the Client is also the client of the matter
       */
      is_matter_client?: boolean;
      /**
       * The primary email address of client
       */
      primary_email_address?: string;
      /**
       * The primary phone number of client
       */
      primary_phone_number?: string;
    };
    Client: components["schemas"]["Client_base"] & {
      avatar?: components["schemas"]["Avatar_base"];
      company?: components["schemas"]["Contact_base"];
      /**
       * Address
       */
      addresses?: components["schemas"]["Address_base"][];
      /**
       * EmailAddress
       */
      email_addresses?: components["schemas"]["EmailAddress_base"][];
      /**
       * PhoneNumber
       */
      phone_numbers?: components["schemas"]["PhoneNumber_base"][];
      /**
       * WebSite
       */
      web_sites?: components["schemas"]["WebSite_base"][];
    };
    Client_Events: {
      record?: components["schemas"]["Client"];
      events?: components["schemas"]["EventDetail"][];
    };
    ClientShow: { data: components["schemas"]["Client"] };
    CreditMemo_base: {
      /**
       * Unique identifier for the *CreditMemo*
       */
      id?: number;
      /**
       * ETag for the *CreditMemo*
       */
      etag?: string;
      /**
       * Date the *CreditMemo* was recorded (as a ISO-8601 date)
       */
      date?: string;
      /**
       * Total amount credited
       */
      amount?: number;
      /**
       * A detailed description for the *CreditMemo*
       */
      description?: string;
      /**
       * Whether the *CreditMemo* is applied as discount
       */
      discount?: boolean;
      /**
       * Time the *CreditMemo* was voided (as a ISO-8601 timestamp)
       */
      voided_at?: string;
      /**
       * The time the *CreditMemo* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *CreditMemo* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    CreditMemo: components["schemas"]["CreditMemo_base"] & {
      user?: components["schemas"]["User_base"];
      contact?: components["schemas"]["Contact_base"];
      /**
       * Allocation
       */
      allocations?: components["schemas"]["Allocation_base"][];
    };
    CreditMemo_Events: {
      record?: components["schemas"]["CreditMemo"];
      events?: components["schemas"]["EventDetail"][];
    };
    CreditMemoShow: { data: components["schemas"]["CreditMemo"] };
    CreditMemoList: {
      /**
       * CreditMemo List Response
       */
      data: components["schemas"]["CreditMemo"][];
    };
    CreditMemoListEvent: {
      /**
       * CreditMemo Event List Response
       */
      data: components["schemas"]["CreditMemo_Events"][];
    };
    CommunicationEmlFile_base: {
      /**
       * Unique identifier for the *CommunicationEmlFile*
       */
      id?: number;
    };
    CommunicationEmlFile: components["schemas"]["CommunicationEmlFile_base"] & {
      [key: string]: any;
    };
    CommunicationEmlFile_Events: {
      record?: components["schemas"]["CommunicationEmlFile"];
      events?: components["schemas"]["EventDetail"][];
    };
    CommunicationResult_base: { [key: string]: any };
    CommunicationResult: components["schemas"]["CommunicationResult_base"] & {
      user?: components["schemas"]["User_base"];
      matter?: components["schemas"]["Matter_base"];
      communication_eml_file?: components["schemas"]["CommunicationEmlFile_base"];
      /**
       * Participant
       */
      senders?: components["schemas"]["Participant_base"][];
      /**
       * Participant
       */
      receivers?: components["schemas"]["Participant_base"][];
      /**
       * ExternalProperty
       */
      external_properties?: components["schemas"]["ExternalProperty_base"][];
      /**
       * Activity
       */
      time_entries?: components["schemas"]["Activity_base"][];
      /**
       * Document
       */
      documents?: components["schemas"]["Document_base"][];
      /**
       * Highlight
       */
      highlights?: components["schemas"]["Highlight_base"][];
    };
    CommunicationResult_Events: {
      record?: components["schemas"]["CommunicationResult"];
      events?: components["schemas"]["EventDetail"][];
    };
    ClioPaymentsAccount_base: {
      /**
       * Unique identifier for the *ClioPaymentsAccount*
       */
      id?: number;
      /**
       * ETag for the *ClioPaymentsAccount*
       */
      etag?: string;
    };
    ClioPaymentsAccount: components["schemas"]["ClioPaymentsAccount_base"] & {
      /**
       * ClioPaymentsMerchantAccount
       */
      merchant_accounts?: components["schemas"]["ClioPaymentsMerchantAccount_base"][];
      /**
       * ClioPaymentsMerchantAccountMapping
       */
      merchant_account_mappings?: components["schemas"]["ClioPaymentsMerchantAccountMapping_base"][];
    };
    ClioPaymentsAccount_Events: {
      record?: components["schemas"]["ClioPaymentsAccount"];
      events?: components["schemas"]["EventDetail"][];
    };
    TaskResult_base: { [key: string]: any };
    TaskResult: components["schemas"]["TaskResult_base"] & {
      task_type?: components["schemas"]["TaskType_base"];
      assigner?: components["schemas"]["User_base"];
      matter?: components["schemas"]["Matter_base"];
      assignee?: components["schemas"]["Participant_base"];
      /**
       * Reminder
       */
      reminders?: components["schemas"]["Reminder_base"][];
      /**
       * Activity
       */
      time_entries?: components["schemas"]["Activity_base"][];
      /**
       * Highlight
       */
      highlights?: components["schemas"]["Highlight_base"][];
    };
    TaskResult_Events: {
      record?: components["schemas"]["TaskResult"];
      events?: components["schemas"]["EventDetail"][];
    };
    TaskType_base: {
      /**
       * Unique identifier for the *TaskType*
       */
      id?: number;
      /**
       * ETag for the *TaskType*
       */
      etag?: string;
      /**
       * The name of the *TaskType*
       */
      name?: string;
      /**
       * The time the *TaskType* was deleted (as a ISO-8601 timestamp)
       */
      deleted_at?: string;
      /**
       * The time the *TaskType* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *TaskType* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    TaskType: components["schemas"]["TaskType_base"] & { [key: string]: any };
    TaskType_Events: {
      record?: components["schemas"]["TaskType"];
      events?: components["schemas"]["EventDetail"][];
    };
    TaskTypeShow: { data: components["schemas"]["TaskType"] };
    TaskTypeList: {
      /**
       * TaskType List Response
       */
      data: components["schemas"]["TaskType"][];
    };
    TaskTypeListEvent: {
      /**
       * TaskType Event List Response
       */
      data: components["schemas"]["TaskType_Events"][];
    };
    LegalAidUkContact_base: {
      /**
       * Unique identifier for the *LegalAidUkContact*
       */
      id?: number;
      /**
       * The ethnicity of the LegalAidUkContact; for Legal Aid UK only
       */
      ethnicity?: number;
      /**
       * The gender of the LegalAidUkContact; for Legal Aid UK only
       */
      gender?: number;
      /**
       * The disability of the LegalAidUkContact; for Legal Aid UK only
       */
      disability?: number;
      /**
       * The financial eligibility of the LegalAidUkContact; for Legal Aid UK only
       */
      financially_eligible?: boolean;
    };
    LegalAidUkContact: components["schemas"]["LegalAidUkContact_base"] & {
      account?: components["schemas"]["Account_base"];
      contact?: components["schemas"]["Contact_base"];
    };
    LegalAidUkContact_Events: {
      record?: components["schemas"]["LegalAidUkContact"];
      events?: components["schemas"]["EventDetail"][];
    };
    WebSite_base: {
      /**
       * Unique identifier for the *WebSite*
       */
      id?: number;
      /**
       * ETag for the *WebSite*
       */
      etag?: string;
      /**
       * The address of the *WebSite*
       */
      address?: string;
      /**
       * The type of *WebSite* it is
       */
      name?:
        | "Work"
        | "Personal"
        | "Twitter"
        | "Facebook"
        | "LinkedIn"
        | "Instant Messenger"
        | "Other";
      /**
       * Whether it is the default for this contact
       */
      default_web_site?: boolean;
      /**
       * The time the *WebSite* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *WebSite* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    WebSite: components["schemas"]["WebSite_base"] & { [key: string]: any };
    WebSite_Events: {
      record?: components["schemas"]["WebSite"];
      events?: components["schemas"]["EventDetail"][];
    };
    ContactResult_base: { [key: string]: any };
    ContactResult: components["schemas"]["ContactResult_base"] & {
      /**
       * ActivityRate
       */
      activity_rates?: components["schemas"]["ActivityRate_base"][];
      /**
       * Address
       */
      addresses?: components["schemas"]["Address_base"][];
      /**
       * CustomFieldValue
       */
      custom_field_values?: components["schemas"]["CustomFieldValue"][];
      /**
       * CustomFieldSetAssociation
       */
      custom_field_set_associations?: components["schemas"]["CustomFieldSetAssociation_base"][];
      /**
       * EmailAddress
       */
      email_addresses?: components["schemas"]["EmailAddress_base"][];
      /**
       * InstantMessenger
       */
      instant_messengers?: components["schemas"]["InstantMessenger_base"][];
      /**
       * PhoneNumber
       */
      phone_numbers?: components["schemas"]["PhoneNumber_base"][];
      /**
       * WebSite
       */
      web_sites?: components["schemas"]["WebSite_base"][];
      /**
       * NotificationMethod
       */
      notification_methods?: components["schemas"]["NotificationMethod_base"][];
      /**
       * AccountBalance
       */
      account_balances?: components["schemas"]["AccountBalance_base"][];
      /**
       * Contact
       */
      related_contacts?: components["schemas"]["Contact_base"][];
      primary_work_address?: components["schemas"]["Address_base"];
      primary_address?: components["schemas"]["Address_base"];
      secondary_address?: components["schemas"]["Address_base"];
      company?: components["schemas"]["Contact_base"];
      avatar?: components["schemas"]["Avatar_base"];
      payment_profile?: components["schemas"]["PaymentProfile_base"];
      folder?: components["schemas"]["Folder_base"];
      co_counsel_rate?: components["schemas"]["ActivityRate_base"];
      primary_web_site?: components["schemas"]["WebSite_base"];
      /**
       * Highlight
       */
      highlights?: components["schemas"]["Highlight_base"][];
    };
    ContactResult_Events: {
      record?: components["schemas"]["ContactResult"];
      events?: components["schemas"]["EventDetail"][];
    };
    Address_base: {
      /**
       * Unique identifier for the *Address*
       */
      id?: number;
      /**
       * ETag for the *Address*
       */
      etag?: string;
      /**
       * Street of the *Address*
       */
      street?: string;
      /**
       * City of the *Address*
       */
      city?: string;
      /**
       * Province or state of the *Address*
       */
      province?: string;
      /**
       * Postal code of the *Address*
       */
      postal_code?: string;
      /**
       * Country of the *Address*
       */
      country?: string;
      /**
       * The name of the *Address*
       */
      name?: "Work" | "Home" | "Billing" | "Other";
      /**
       * The time the *Address* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Address* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * Whether it is the default for this contact
       */
      primary?: boolean;
    };
    Address: components["schemas"]["Address_base"] & { [key: string]: any };
    Address_Events: {
      record?: components["schemas"]["Address"];
      events?: components["schemas"]["EventDetail"][];
    };
    DocumentContentsResult_base: {
      /**
       * The text content of a document
       */
      content?: string;
    };
    DocumentContentsResult: components["schemas"]["DocumentContentsResult_base"] & {
      parent?: components["schemas"]["Folder_base"];
      matter?: components["schemas"]["Matter_base"];
      contact?: components["schemas"]["Contact_base"];
      document_category?: components["schemas"]["DocumentCategory_base"];
      creator?: components["schemas"]["User_base"];
      latest_document_version?: components["schemas"]["DocumentVersion_base"];
      /**
       * ExternalProperty
       */
      external_properties?: components["schemas"]["ExternalProperty_base"][];
      /**
       * Highlight
       */
      highlights?: components["schemas"]["Highlight_base"][];
    };
    DocumentContentsResult_Events: {
      record?: components["schemas"]["DocumentContentsResult"];
      events?: components["schemas"]["EventDetail"][];
    };
    MatterSubscriber_base: {
      /**
       * Unique identifier for the *MatterSubscriber*
       */
      id?: number;
      /**
       * ETag for the *MatterSubscriber*
       */
      etag?: string;
      /**
       * The name of the *MatterSubscriber*
       */
      name?: string;
      /**
       * The time the *MatterSubscriber* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *MatterSubscriber* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    MatterSubscriber: components["schemas"]["MatterSubscriber_base"] & {
      user?: components["schemas"]["User_base"];
      account?: components["schemas"]["Account_base"];
      matter?: components["schemas"]["Matter_base"];
    };
    MatterSubscriber_Events: {
      record?: components["schemas"]["MatterSubscriber"];
      events?: components["schemas"]["EventDetail"][];
    };
    Relationship_base: {
      /**
       * Unique identifier for the *Relationship*
       */
      id?: number;
      /**
       * ETag for the *Relationship*
       */
      etag?: string;
      /**
       * A detailed description of the *Relationship*
       */
      description?: string;
      /**
       * The time the *Relationship* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Relationship* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    Relationship: components["schemas"]["Relationship_base"] & {
      matter?: components["schemas"]["Matter_base"];
      contact?: components["schemas"]["Contact_base"];
    };
    Relationship_Events: {
      record?: components["schemas"]["Relationship"];
      events?: components["schemas"]["EventDetail"][];
    };
    RelationshipShow: { data: components["schemas"]["Relationship"] };
    RelationshipList: {
      /**
       * Relationship List Response
       */
      data: components["schemas"]["Relationship"][];
    };
    RelationshipListEvent: {
      /**
       * Relationship Event List Response
       */
      data: components["schemas"]["Relationship_Events"][];
    };
    MatterBillRecipient_base: {
      /**
       * The time the *MatterBillRecipient* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * ETag for the *MatterBillRecipient*
       */
      etag?: string;
      /**
       * Unique identifier for the *MatterBillRecipient*
       */
      id?: number;
      /**
       * The time the *MatterBillRecipient* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    MatterBillRecipient: components["schemas"]["MatterBillRecipient_base"] & {
      recipient?: components["schemas"]["Contact_base"];
    };
    MatterBillRecipient_Events: {
      record?: components["schemas"]["MatterBillRecipient"];
      events?: components["schemas"]["EventDetail"][];
    };
    AccountBalance_base: {
      /**
       * Unique identifier for the *AccountBalance*
       */
      id?: number;
      /**
       * The current balance of the bank account available to the matter or contact
       */
      balance?: number;
      /**
       * The bank account type. Either Operating or Trust
       */
      type?: string;
      /**
       * The name of the bank account
       */
      name?: string;
    };
    AccountBalance: components["schemas"]["AccountBalance_base"] & {
      [key: string]: any;
    };
    AccountBalance_Events: {
      record?: components["schemas"]["AccountBalance"];
      events?: components["schemas"]["EventDetail"][];
    };
    MatterBudget_base: {
      /**
       * Unique identifier for the *MatterBudget*
       */
      id?: number;
      /**
       * ETag for the *MatterBudget*
       */
      etag?: string;
      /**
       * The amount allocated for the matter.
       */
      budget?: number;
      /**
       * Whether the budget includes expenses.
       */
      include_expenses?: boolean;
      /**
       * Percentage of the budget when it starts notifying users.
       */
      notification_threshold?: number;
      /**
       * Whether to notify users when the matter reaches the notification threshold.
       */
      notify_users?: boolean;
      /**
       * The time the *MatterBudget* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *MatterBudget* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    MatterBudget: components["schemas"]["MatterBudget_base"] & {
      /**
       * User
       */
      users?: components["schemas"]["User_base"][];
    };
    MatterBudget_Events: {
      record?: components["schemas"]["MatterBudget"];
      events?: components["schemas"]["EventDetail"][];
    };
    Group_base: {
      /**
       * Unique identifier for the *Group*
       */
      id?: number;
      /**
       * ETag for the *Group*
       */
      etag?: string;
      /**
       * The name of the *Group*
       */
      name?: string;
      /**
       * The type of the *Group*
       */
      type?: "UserGroup" | "AdhocGroup" | "AccountGroup";
      /**
       * The time the *Group* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Group* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * Whether or not the Group is a UserGroup for a Clio Connect User
       */
      client_connect_user?: boolean;
    };
    Group: components["schemas"]["Group_base"] & {
      /**
       * User
       */
      users?: components["schemas"]["User_base"][];
    };
    Group_Events: {
      record?: components["schemas"]["Group"];
      events?: components["schemas"]["EventDetail"][];
    };
    GroupShow: { data: components["schemas"]["Group"] };
    GroupList: {
      /**
       * Group List Response
       */
      data: components["schemas"]["Group"][];
    };
    GroupListEvent: {
      /**
       * Group Event List Response
       */
      data: components["schemas"]["Group_Events"][];
    };
    EvergreenRetainer_base: {
      /**
       * Unique identifier for the *EvergreenRetainer*
       */
      id?: number;
      /**
       * ETag for the *EvergreenRetainer*
       */
      etag?: string;
      /**
       * Minimum threshold of the *EvergreenRetainer%*
       */
      minimum_threshold?: number;
    };
    EvergreenRetainer: components["schemas"]["EvergreenRetainer_base"] & {
      /**
       * User
       */
      recipients?: components["schemas"]["User_base"][];
    };
    EvergreenRetainer_Events: {
      record?: components["schemas"]["EvergreenRetainer"];
      events?: components["schemas"]["EventDetail"][];
    };
    Highlight_base: {
      /**
       * What part of the record matched the query.
       */
      text?: string;
      /**
       * Where the record matched the query.
       */
      field?: string;
    };
    Highlight: components["schemas"]["Highlight_base"] & { [key: string]: any };
    Highlight_Events: {
      record?: components["schemas"]["Highlight"];
      events?: components["schemas"]["EventDetail"][];
    };
    NoteResult_base: { [key: string]: any };
    NoteResult: components["schemas"]["NoteResult_base"] & {
      matter?: components["schemas"]["Matter_base"];
      contact?: components["schemas"]["Contact_base"];
      author?: components["schemas"]["User_base"];
      /**
       * Activity
       */
      time_entries?: components["schemas"]["Activity_base"][];
      /**
       * Highlight
       */
      highlights?: components["schemas"]["Highlight_base"][];
    };
    NoteResult_Events: {
      record?: components["schemas"]["NoteResult"];
      events?: components["schemas"]["EventDetail"][];
    };
    MatterResult_base: { [key: string]: any };
    MatterResult: components["schemas"]["MatterResult_base"] & {
      client?: components["schemas"]["Contact_base"];
      contingency_fee?: components["schemas"]["ContingencyFee_base"];
      custom_rate?: components["schemas"]["MatterCustomRate"];
      folder?: components["schemas"]["Folder_base"];
      group?: components["schemas"]["Group_base"];
      matter_budget?: components["schemas"]["MatterBudget_base"];
      originating_attorney?: components["schemas"]["User_base"];
      practice_area?: components["schemas"]["PracticeArea_base"];
      responsible_attorney?: components["schemas"]["User_base"];
      statute_of_limitations?: components["schemas"]["Task_base"];
      user?: components["schemas"]["User_base"];
      import?: components["schemas"]["ImportDetail_base"];
      /**
       * AccountBalance
       */
      account_balances?: components["schemas"]["AccountBalance_base"][];
      /**
       * CustomFieldValue
       */
      custom_field_values?: components["schemas"]["CustomFieldValue"][];
      /**
       * CustomFieldSetAssociation
       */
      custom_field_set_associations?: components["schemas"]["CustomFieldSetAssociation_base"][];
      /**
       * Relationship
       */
      relationships?: components["schemas"]["Relationship_base"][];
      /**
       * TaskTemplateListInstace
       */
      task_template_list_instances?: components["schemas"]["TaskTemplateListInstace_base"][];
      /**
       * Highlight
       */
      highlights?: components["schemas"]["Highlight_base"][];
    };
    MatterResult_Events: {
      record?: components["schemas"]["MatterResult"];
      events?: components["schemas"]["EventDetail"][];
    };
    DocumentResult_base: { [key: string]: any };
    DocumentResult: components["schemas"]["DocumentResult_base"] & {
      parent?: components["schemas"]["Folder_base"];
      matter?: components["schemas"]["Matter_base"];
      contact?: components["schemas"]["Contact_base"];
      document_category?: components["schemas"]["DocumentCategory_base"];
      creator?: components["schemas"]["User_base"];
      latest_document_version?: components["schemas"]["DocumentVersion_base"];
      /**
       * ExternalProperty
       */
      external_properties?: components["schemas"]["ExternalProperty_base"][];
      /**
       * Highlight
       */
      highlights?: components["schemas"]["Highlight_base"][];
    };
    DocumentResult_Events: {
      record?: components["schemas"]["DocumentResult"];
      events?: components["schemas"]["EventDetail"][];
    };
    CalendarEntryResult_base: { [key: string]: any };
    CalendarEntryResult: components["schemas"]["CalendarEntryResult_base"] & {
      conference_meeting?: components["schemas"]["ConferenceMeeting_base"];
      matter?: components["schemas"]["Matter_base"];
      matter_docket?: components["schemas"]["MatterDocket_base"];
      calendar_owner?: components["schemas"]["Calendar_base"];
      parent_calendar_entry?: components["schemas"]["CalendarEntry_base"];
      /**
       * Attendee
       */
      attendees?: components["schemas"]["Attendee_base"][];
      /**
       * Calendar
       */
      calendars?: components["schemas"]["Calendar_base"][];
      /**
       * Reminder
       */
      reminders?: components["schemas"]["Reminder_base"][];
      /**
       * ExternalProperty
       */
      external_properties?: components["schemas"]["ExternalProperty_base"][];
      /**
       * Activity
       */
      time_entries?: components["schemas"]["Activity_base"][];
      /**
       * Highlight
       */
      highlights?: components["schemas"]["Highlight_base"][];
    };
    CalendarEntryResult_Events: {
      record?: components["schemas"]["CalendarEntryResult"];
      events?: components["schemas"]["EventDetail"][];
    };
    Task_base: {
      /**
       * Unique identifier for the *Task*
       */
      id?: number;
      /**
       * ETag for the *Task*
       */
      etag?: string;
      /**
       * The name of the *Task*
       */
      name?: string;
      /**
       * Status of the *Task*. (Note that users without advanced tasks can only have either complete or pending)
       */
      status?: "pending" | "in_progress" | "in_review" | "complete";
      /**
       * A detailed description of the *Task*
       */
      description?: string;
      /**
       * The priority of the *Task*
       */
      priority?: "High" | "Normal" | "Low";
      /**
       * The date the *Task* is due (as a ISO-8601 date)
       */
      due_at?: string;
      /**
       * The permission of the *Task*
       */
      permission?: string;
      /**
       * The time the *Task* was completed (as a ISO-8601 timestamp)
       */
      completed_at?: string;
      /**
       * Whether to notify the assigner of the task's completion
       */
      notify_completion?: boolean;
      /**
       * Whether the task is a statute of limitations
       */
      statute_of_limitations?: boolean;
      /**
       * Time the *Task* should take to complete
       */
      time_estimated?: number;
      /**
       * The time the *Task* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Task* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The number of time entries associated with this task
       */
      time_entries_count?: number;
    };
    Task: components["schemas"]["Task_base"] & {
      task_type?: components["schemas"]["TaskType_base"];
      assigner?: components["schemas"]["User_base"];
      matter?: components["schemas"]["Matter_base"];
      assignee?: components["schemas"]["Participant_base"];
      /**
       * Reminder
       */
      reminders?: components["schemas"]["Reminder_base"][];
      /**
       * Activity
       */
      time_entries?: components["schemas"]["Activity_base"][];
    };
    Task_Events: {
      record?: components["schemas"]["Task"];
      events?: components["schemas"]["EventDetail"][];
    };
    TaskShow: { data: components["schemas"]["Task"] };
    TaskList: {
      /**
       * Task List Response
       */
      data: components["schemas"]["Task"][];
    };
    TaskListEvent: {
      /**
       * Task Event List Response
       */
      data: components["schemas"]["Task_Events"][];
    };
    ActivityDescription_base: {
      /**
       * Unique identifier for the *ActivityDescription*
       */
      id?: number;
      /**
       * ETag for the *ActivityDescription*
       */
      etag?: string;
      /**
       * The name of the *ActivityDescription*
       */
      name?: string;
      /**
       * A toggle that determines if a co-counsel user of the firm can have access to this activity description
       */
      visible_to_co_counsel?: boolean;
      /**
       * The time the *ActivityDescription* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *ActivityDescription* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * Whether it is the user's default activity description
       */
      default?: boolean;
      /**
       * The type of the *ActivityDescription*
       */
      type?: string;
      /**
       * The UTBMS activity id if the *ActivityDescription* is a UTBMS activity description
       */
      utbms_activity_id?: number;
      /**
       * The UTBMS activity task name if attached to a UTBMS activity description
       */
      utbms_task_name?: string;
      /**
       * The UTBMS activity task id if attached to a UTBMS activity description
       */
      utbms_task_id?: number;
      /**
       * Custom Xero service code for this activity description
       */
      xero_service_code?: string;
      /**
       * Determines if activity description is accessible to user
       */
      accessible_to_user?: boolean;
      /**
       * Activity category rate type. Either hourly or flat fee
       */
      category_type?: string;
    };
    ActivityDescription: components["schemas"]["ActivityDescription_base"] & {
      /**
       * Group
       */
      groups?: components["schemas"]["Group_base"][];
      rate?: components["schemas"]["ActivityDescriptionRate_base"];
      utbms_task?: components["schemas"]["UtbmsCode_base"];
      utbms_activity?: components["schemas"]["UtbmsCode_base"];
    };
    ActivityDescription_Events: {
      record?: components["schemas"]["ActivityDescription"];
      events?: components["schemas"]["EventDetail"][];
    };
    ActivityDescriptionShow: {
      data: components["schemas"]["ActivityDescription"];
    };
    ActivityDescriptionList: {
      /**
       * ActivityDescription List Response
       */
      data: components["schemas"]["ActivityDescription"][];
    };
    ActivityDescriptionListEvent: {
      /**
       * ActivityDescription Event List Response
       */
      data: components["schemas"]["ActivityDescription_Events"][];
    };
    Communication_base: {
      /**
       * Unique identifier for the *Communication*
       */
      id?: number;
      /**
       * ETag for the *Communication*
       */
      etag?: string;
      /**
       * The subject line of the *Communication*
       */
      subject?: string;
      /**
       * The main content of the *Communication*
       */
      body?: string;
      /**
       * The type of the *Communication*
       */
      type?: "EmailCommunication" | "PhoneCommunication";
      /**
       * The date of the *Communication* (as a ISO-8601 datestamp)
       */
      date?: string;
      /**
       * The number of time_entries associated with the *Communication*
       */
      time_entries_count?: number;
      /**
       * The time the *Communication* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Communication* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The date-time of the *Communication* (in ISO-8601 format)
       */
      received_at?: string;
    };
    Communication: components["schemas"]["Communication_base"] & {
      user?: components["schemas"]["User_base"];
      matter?: components["schemas"]["Matter_base"];
      communication_eml_file?: components["schemas"]["CommunicationEmlFile_base"];
      /**
       * Participant
       */
      senders?: components["schemas"]["Participant_base"][];
      /**
       * Participant
       */
      receivers?: components["schemas"]["Participant_base"][];
      /**
       * ExternalProperty
       */
      external_properties?: components["schemas"]["ExternalProperty_base"][];
      /**
       * Activity
       */
      time_entries?: components["schemas"]["Activity_base"][];
      /**
       * Document
       */
      documents?: components["schemas"]["Document_base"][];
    };
    Communication_Events: {
      record?: components["schemas"]["Communication"];
      events?: components["schemas"]["EventDetail"][];
    };
    CommunicationShow: { data: components["schemas"]["Communication"] };
    CommunicationList: {
      /**
       * Communication List Response
       */
      data: components["schemas"]["Communication"][];
    };
    CommunicationListEvent: {
      /**
       * Communication Event List Response
       */
      data: components["schemas"]["Communication_Events"][];
    };
    ActivityResult_base: { [key: string]: any };
    ActivityResult: components["schemas"]["ActivityResult_base"] & {
      activity_description?: components["schemas"]["ActivityDescription_base"];
      expense_category?: components["schemas"]["ExpenseCategory_base"];
      bill?: components["schemas"]["Bill_base"];
      communication?: components["schemas"]["Communication_base"];
      matter?: components["schemas"]["Matter_base"];
      matter_note?: components["schemas"]["Note_base"];
      contact_note?: components["schemas"]["Note_base"];
      subject?: components["schemas"]["PolymorphicObject_base"];
      timer?: components["schemas"]["Timer_base"];
      user?: components["schemas"]["User_base"];
      utbms_expense?: components["schemas"]["UtbmsCode_base"];
      vendor?: components["schemas"]["Contact_base"];
      calendar_entry?: components["schemas"]["ActivityResult_CalendarEntry_base"];
      task?: components["schemas"]["ActivityResult_Task_base"];
      document_version?: components["schemas"]["DocumentVersion_base"];
      /**
       * Highlight
       */
      highlights?: components["schemas"]["Highlight_base"][];
    };
    ActivityResult_Events: {
      record?: components["schemas"]["ActivityResult"];
      events?: components["schemas"]["EventDetail"][];
    };
    ActivityResult_CalendarEntry_base: {
      /**
       * Unique identifier for the *CalendarEntry*
       */
      id?: string;
      /**
       * ETag for the *CalendarEntry*
       */
      etag?: string;
      /**
       * The id of the calendar owner.
       */
      calendar_owner_id?: number;
    };
    ActivityResult_Task_base: {
      /**
       * Unique identifier for the *Task*
       */
      id?: number;
      /**
       * ETag for the *Task*
       */
      etag?: string;
    };
    Interest_base: {
      /**
       * Rate for the *Interest%*
       */
      rate?: number;
      /**
       * Type of *Interest%* being applied
       */
      type?: "simple" | "compound";
      /**
       * Number of days that represent the frequency which your *Interest%* will be applied
       */
      period?: number;
      /**
       * Interest balance for the object
       */
      balance?: number;
      /**
       * Interest total for the object
       */
      total?: number;
    };
    Interest: components["schemas"]["Interest_base"] & { [key: string]: any };
    Interest_Events: {
      record?: components["schemas"]["Interest"];
      events?: components["schemas"]["EventDetail"][];
    };
    LegalAidUkMatter_base: {
      /**
       * Access point
       */
      access_point?: string;
      /**
       * Category
       */
      category?: number;
      /**
       * The time the *LegalAidUkMatter* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * ETag for the *LegalAidUkMatter*
       */
      etag?: string;
      /**
       * Fee scheme
       */
      fee_scheme?: number;
      /**
       * Unique identifier for the *LegalAidUkMatter*
       */
      id?: number;
      /**
       * Local authority number
       */
      local_authority_number?: string;
      /**
       * Postal application accepted
       */
      postal_application_accepted?: string;
      /**
       * Procurement area
       */
      procurement_area?: string;
      /**
       * Schedule reference number
       */
      schedule_reference_number?: string;
      /**
       * The time the *LegalAidUkMatter* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    LegalAidUkMatter: components["schemas"]["LegalAidUkMatter_base"] & {
      account?: components["schemas"]["Account_base"];
      matter?: components["schemas"]["Matter_base"];
    };
    LegalAidUkMatter_Events: {
      record?: components["schemas"]["LegalAidUkMatter"];
      events?: components["schemas"]["EventDetail"][];
    };
    LegalAidUkActivity_base: {
      /**
       * Unique identifier for the *LegalAidUkActivity*
       */
      id?: number;
      /**
       * Lookup key that references JSON data; for Legal Aid UK only
       */
      json_key?: string;
      /**
       * Uplift percentage applied to activity rate; for Legal Aid UK only
       */
      uplift?: number;
      /**
       * Flag to indicate if rate was manually entered by user; for Legal Aid UK only
       */
      is_custom_rate?: boolean;
      /**
       * Flag to indicate if tax is exclusive; for Legal Aid UK only
       */
      tax_exclusive?: boolean;
    };
    LegalAidUkActivity: components["schemas"]["LegalAidUkActivity_base"] & {
      account?: components["schemas"]["Account_base"];
      activity?: components["schemas"]["Activity_base"];
    };
    LegalAidUkActivity_Events: {
      record?: components["schemas"]["LegalAidUkActivity"];
      events?: components["schemas"]["EventDetail"][];
    };
    Avatar_base: {
      /**
       * Unique identifier for the *Avatar*
       */
      id?: number;
      /**
       * ETag for the *Avatar*
       */
      etag?: string;
      /**
       * The URL for the *Avatar*
       */
      url?: string;
      /**
       * Whether to destroy the *Avatar*
       */
      _destroy?: boolean;
    };
    Avatar: components["schemas"]["Avatar_base"] & { [key: string]: any };
    Avatar_Events: {
      record?: components["schemas"]["Avatar"];
      events?: components["schemas"]["EventDetail"][];
    };
    OutstandingClientBalanceRecipient_base: {
      /**
       * The time the *OutstandingClientBalanceRecipient* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * ETag for the *OutstandingClientBalanceRecipient*
       */
      etag?: string;
      /**
       * Unique identifier for the *OutstandingClientBalanceRecipient*
       */
      id?: number;
      /**
       * If the associated contact is a recipient for all of the client's outstanding matters
       */
      on_all_matters?: boolean;
      /**
       * The time the *OutstandingClientBalanceRecipient* was updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    OutstandingClientBalanceRecipient: components["schemas"]["OutstandingClientBalanceRecipient_base"] & {
      recipient?: components["schemas"]["OutstandingClientBalanceRecipient_Contact_base"];
    };
    OutstandingClientBalanceRecipient_Events: {
      record?: components["schemas"]["OutstandingClientBalanceRecipient"];
      events?: components["schemas"]["EventDetail"][];
    };
    OutstandingClientBalanceRecipient_Contact_base: {
      /**
       * Unique identifier for the *Contact*
       */
      id?: number;
      /**
       * The full name of the *Contact*
       */
      name?: string;
      /**
       * First name of the Person
       */
      first_name?: string;
      /**
       * Middle name of the Person
       */
      middle_name?: string;
      /**
       * Last name of the Person
       */
      last_name?: string;
      /**
       * The type of the *Contact*
       */
      type?: "Company" | "Person";
      /**
       * The primary email address associated with this *Contact*.
       */
      primary_email_address?: string;
    };
    Allocation_base: {
      /**
       * Unique identifier for the *Allocation*
       */
      id?: number;
      /**
       * ETag for the *Allocation*
       */
      etag?: string;
      /**
       * The date the allocation was applied (as a ISO-8601 date)
       */
      date?: string;
      /**
       * The total amount of money that the user has allocated
       */
      amount?: number;
      /**
       * Whether the allocation is applied to interest amount
       */
      interest?: boolean;
      /**
       * Time the *Allocation* was voided (as a ISO-8601 timestamp)
       */
      voided_at?: string;
      /**
       * The time the *Allocation* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Allocation* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The description from the associated Credit Memo (if applicable)
       */
      description?: string;
      /**
       * Whether this allocation is associated with an online payment or not
       */
      has_online_payment?: boolean;
      /**
       * Whether the record can be deleted or not
       */
      destroyable?: boolean;
    };
    Allocation: components["schemas"]["Allocation_base"] & {
      bill?: components["schemas"]["Bill_base"];
      source_bank_account?: components["schemas"]["BankAccount_base"];
      destination_bank_account?: components["schemas"]["BankAccount_base"];
      matter?: components["schemas"]["Matter_base"];
      contact?: components["schemas"]["Contact_base"];
      parent?: components["schemas"]["PolymorphicObject_base"];
    };
    Allocation_Events: {
      record?: components["schemas"]["Allocation"];
      events?: components["schemas"]["EventDetail"][];
    };
    AllocationShow: { data: components["schemas"]["Allocation"] };
    AllocationList: {
      /**
       * Allocation List Response
       */
      data: components["schemas"]["Allocation"][];
    };
    AllocationListEvent: {
      /**
       * Allocation Event List Response
       */
      data: components["schemas"]["Allocation_Events"][];
    };
    BankTransaction_base: {
      /**
       * Unique identifier for the *BankTransaction*
       */
      id?: number;
      /**
       * The type of the *BankTransaction*
       */
      type?: string;
      /**
       * ETag for the *BankTransaction*
       */
      etag?: string;
      /**
       * The time the *BankTransaction* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *BankTransaction* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The associated bank account.
       */
      bank_account_id?: number;
      /**
       * Where the transaction came from.
       */
      source?: string;
      /**
       * The reference code for the transaction.
       */
      confirmation?: string;
      /**
       * The date of the transaction.
       */
      date?: string;
      /**
       * The amount of the transaction.
       */
      amount?: number;
      /**
       * The currency of the transaction.
       */
      currency?: string;
      /**
       * The description of the transaction.
       */
      description?: string;
      /**
       * The exchange rate of the transaction.
       */
      exchange_rate?: number;
      /**
       * What kind of transaction.
       */
      transaction_type?: string;
      /**
       * The amount of funds received in this transaction.
       */
      funds_in?: number;
      /**
       * The amount of funds withdrawn in this transaction.
       */
      funds_out?: number;
      /**
       * Whether the transaction was created through Clio Payments.
       */
      clio_payments_transaction?: boolean;
      /**
       * The current account balance.
       */
      current_account_balance?: number;
    };
    BankTransaction: components["schemas"]["BankTransaction_base"] & {
      client?: components["schemas"]["Contact_base"];
      matter?: components["schemas"]["Matter_base"];
      bank_account?: components["schemas"]["BankAccount_base"];
      bill?: components["schemas"]["Bill_base"];
      allocation?: components["schemas"]["Allocation_base"];
    };
    BankTransaction_Events: {
      record?: components["schemas"]["BankTransaction"];
      events?: components["schemas"]["EventDetail"][];
    };
    BankTransactionShow: { data: components["schemas"]["BankTransaction"] };
    BankTransactionList: {
      /**
       * BankTransaction List Response
       */
      data: components["schemas"]["BankTransaction"][];
    };
    BankTransactionListEvent: {
      /**
       * BankTransaction Event List Response
       */
      data: components["schemas"]["BankTransaction_Events"][];
    };
    TaskTemplateListInstace_base: {
      /**
       * Unique identifier for the *TaskTemplateListInstace*
       */
      id?: number;
      /**
       * ETag for the *TaskTemplateListInstace*
       */
      etag?: string;
      /**
       * The time the *TaskTemplateListInstace* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *TaskTemplateListInstace* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    TaskTemplateListInstace: components["schemas"]["TaskTemplateListInstace_base"] & {
      matter?: components["schemas"]["Matter_base"];
      task_template_list?: components["schemas"]["TaskTemplateList_base"];
    };
    TaskTemplateListInstace_Events: {
      record?: components["schemas"]["TaskTemplateListInstace"];
      events?: components["schemas"]["EventDetail"][];
    };
    InterestCharge_base: {
      /**
       * Unique identifier for the *InterestCharge*
       */
      id?: number;
      /**
       * ETag for the *InterestCharge*
       */
      etag?: string;
      /**
       * The *InterestCharge* date (as a ISO-8601 date)
       */
      date?: string;
      /**
       * The description for the *InterestCharge*
       */
      description?: string;
      /**
       * The total amount for the *InterestCharge*
       */
      total?: number;
    };
    InterestCharge: components["schemas"]["InterestCharge_base"] & {
      bill?: components["schemas"]["Bill_base"];
      /**
       * Balance
       */
      balances?: components["schemas"]["Balance_base"][];
      /**
       * Matter
       */
      matters?: components["schemas"]["Matter_base"][];
    };
    InterestCharge_Events: {
      record?: components["schemas"]["InterestCharge"];
      events?: components["schemas"]["EventDetail"][];
    };
    InterestChargeList: {
      /**
       * InterestCharge List Response
       */
      data: components["schemas"]["InterestCharge"][];
    };
    InterestChargeListEvent: {
      /**
       * InterestCharge Event List Response
       */
      data: components["schemas"]["InterestCharge_Events"][];
    };
    MatterBalance_base: {
      /**
       * Unique identifier for the *MatterBalance*
       */
      id?: number;
      /**
       * The amount of balance of a matter.
       */
      amount?: number;
    };
    MatterBalance: components["schemas"]["MatterBalance_base"] & {
      [key: string]: any;
    };
    MatterBalance_Events: {
      record?: components["schemas"]["MatterBalance"];
      events?: components["schemas"]["EventDetail"][];
    };
    Balance_base: {
      /**
       * Unique identifier for the *Balance*
       */
      id?: number;
      /**
       * The amount for this Balance.
       */
      amount?: number;
      /**
       * The type of Balance this data is for.
       */
      type?: "Matter" | "Client";
      /**
       * The interest amount for this Balance.
       */
      interest_amount?: number;
      /**
       * The amount due for this Balance, factoring in applicable discounts.
       */
      due?: number;
    };
    Balance: components["schemas"]["Balance_base"] & { [key: string]: any };
    Balance_Events: {
      record?: components["schemas"]["Balance"];
      events?: components["schemas"]["EventDetail"][];
    };
    ImportMapping_base: {
      /**
       * Unique identifier for the *ImportMapping*
       */
      id?: number;
      /**
       * The type of the field
       */
      field_type?: "string" | "boolean" | "date" | "time";
      /**
       * The destination field
       */
      to?: string;
      /**
       * The source field
       */
      from?: string;
      /**
       * The default value for the field
       */
      default_value?: string;
      /**
       * The format of the field
       */
      format?: string;
    };
    ImportMapping: components["schemas"]["ImportMapping_base"] & {
      [key: string]: any;
    };
    ImportMapping_Events: {
      record?: components["schemas"]["ImportMapping"];
      events?: components["schemas"]["EventDetail"][];
    };
    JurisdictionsToTrigger_base: {
      /**
       * Unique identifier for the *JurisdictionsToTrigger*
       */
      id?: number;
      /**
       * ETag for the *JurisdictionsToTrigger*
       */
      etag?: string;
      /**
       * Server id
       */
      system_id?: number;
      /**
       * A detailed description of the *JurisdictionsToTrigger*
       */
      description?: string;
      /**
       * Whether the associated dates should not be recalculated
       */
      do_not_recalculate?: boolean;
      /**
       * Whether the user must select a Date Offset (Service Type)
       */
      is_served?: boolean;
      /**
       * Whether the trigger has requirements
       */
      is_requirements_required?: boolean;
    };
    JurisdictionsToTrigger: components["schemas"]["JurisdictionsToTrigger_base"] & {
      [key: string]: any;
    };
    JurisdictionsToTrigger_Events: {
      record?: components["schemas"]["JurisdictionsToTrigger"];
      events?: components["schemas"]["EventDetail"][];
    };
    JurisdictionsToTriggerShow: {
      data: components["schemas"]["JurisdictionsToTrigger"];
    };
    JurisdictionsToTriggerList: {
      /**
       * JurisdictionsToTrigger List Response
       */
      data: components["schemas"]["JurisdictionsToTrigger"][];
    };
    JurisdictionsToTriggerListEvent: {
      /**
       * JurisdictionsToTrigger Event List Response
       */
      data: components["schemas"]["JurisdictionsToTrigger_Events"][];
    };
    MatterDocket_base: {
      /**
       * Unique identifier for the *MatterDocket*
       */
      id?: number;
      /**
       * ETag for the *MatterDocket*
       */
      etag?: string;
      /**
       * The name of the *MatterDocket*
       */
      name?: string;
      /**
       * The date the *MatterDocket* will start (as a ISO-8601 date)
       */
      start_date?: string;
      /**
       * The time the *MatterDocket* will start, required for specific triggers (as a ISO-8601 timestamp)
       */
      start_time?: string;
      /**
       * The status of the *MatterDocket* creation
       */
      status?: string;
      /**
       * The time the *MatterDocket* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *MatterDocket* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The time the *MatterDocket* was deleted (as a ISO-8601 timestamp)
       */
      deleted_at?: string;
    };
    MatterDocket: components["schemas"]["MatterDocket_base"] & {
      matter?: components["schemas"]["Matter_base"];
      jurisdiction?: components["schemas"]["Jurisdiction_base"];
      trigger?: components["schemas"]["JurisdictionsToTrigger_base"];
      service_type?: components["schemas"]["ServiceType_base"];
      /**
       * CalendarEntry
       */
      calendar_entries?: components["schemas"]["CalendarEntry_base"][];
    };
    MatterDocket_Events: {
      record?: components["schemas"]["MatterDocket"];
      events?: components["schemas"]["EventDetail"][];
    };
    MatterDocketShow: { data: components["schemas"]["MatterDocket"] };
    MatterDocketList: {
      /**
       * MatterDocket List Response
       */
      data: components["schemas"]["MatterDocket"][];
    };
    MatterDocketListEvent: {
      /**
       * MatterDocket Event List Response
       */
      data: components["schemas"]["MatterDocket_Events"][];
    };
    Jurisdiction_base: {
      /**
       * Unique identifier for the *Jurisdiction*
       */
      id?: number;
      /**
       * ETag for the *Jurisdiction*
       */
      etag?: string;
      /**
       * The time the *Jurisdiction* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Jurisdiction* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * Server ID
       */
      system_id?: number;
      /**
       * Description
       */
      description?: string;
      /**
       * Whether the *Jurisdiction* is default for the current user
       */
      default?: boolean;
    };
    Jurisdiction: components["schemas"]["Jurisdiction_base"] & {
      [key: string]: any;
    };
    Jurisdiction_Events: {
      record?: components["schemas"]["Jurisdiction"];
      events?: components["schemas"]["EventDetail"][];
    };
    JurisdictionShow: { data: components["schemas"]["Jurisdiction"] };
    JurisdictionList: {
      /**
       * Jurisdiction List Response
       */
      data: components["schemas"]["Jurisdiction"][];
    };
    JurisdictionListEvent: {
      /**
       * Jurisdiction Event List Response
       */
      data: components["schemas"]["Jurisdiction_Events"][];
    };
    ServiceType_base: {
      /**
       * Unique identifier for the *ServiceType*
       */
      id?: number;
      /**
       * ETag for the *ServiceType*
       */
      etag?: string;
      /**
       * The time the *ServiceType* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *ServiceType* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * Server ID
       */
      system_id?: number;
      /**
       * A detailed description of the *ServiceType*
       */
      description?: string;
      /**
       * Whether *ServiceType* is default for the current user
       */
      default?: boolean;
    };
    ServiceType: components["schemas"]["ServiceType_base"] & {
      [key: string]: any;
    };
    ServiceType_Events: {
      record?: components["schemas"]["ServiceType"];
      events?: components["schemas"]["EventDetail"][];
    };
    ServiceTypeShow: { data: components["schemas"]["ServiceType"] };
    ServiceTypeList: {
      /**
       * ServiceType List Response
       */
      data: components["schemas"]["ServiceType"][];
    };
    ServiceTypeListEvent: {
      /**
       * ServiceType Event List Response
       */
      data: components["schemas"]["ServiceType_Events"][];
    };
    TaskTemplateList_base: {
      /**
       * Unique identifier for the *TaskTemplateList*
       */
      id?: number;
      /**
       * ETag for the *TaskTemplateList*
       */
      etag?: string;
      /**
       * The name of the *TaskTemplateList*
       */
      name?: string;
      /**
       * A detailed description of the *TaskTemplateList*
       */
      description?: string;
      /**
       * The time the *TaskTemplateList* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *TaskTemplateList* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    TaskTemplateList: {
      /**
       * TaskTemplate List Response
       */
      data: components["schemas"]["TaskTemplate"][];
    };
    TaskTemplateList_Events: {
      record?: components["schemas"]["TaskTemplateList"];
      events?: components["schemas"]["EventDetail"][];
    };
    TaskTemplateListShow: { data: components["schemas"]["TaskTemplateList"] };
    TaskTemplateListList: {
      /**
       * TaskTemplateList List Response
       */
      data: components["schemas"]["TaskTemplateList"][];
    };
    TaskTemplateListListEvent: {
      /**
       * TaskTemplateList Event List Response
       */
      data: components["schemas"]["TaskTemplateList_Events"][];
    };
    ContingencyFee_base: {
      /**
       * Unique identifier for the *ContingencyFee*
       */
      id?: number;
      /**
       * ETag for the *ContingencyFee*
       */
      etag?: string;
      /**
       * Whether the *ContingencyFee* is posted or on a bill
       */
      show_contingency_award?: boolean;
    };
    ContingencyFee: components["schemas"]["ContingencyFee_base"] & {
      user?: components["schemas"]["User_base"];
    };
    ContingencyFee_Events: {
      record?: components["schemas"]["ContingencyFee"];
      events?: components["schemas"]["EventDetail"][];
    };
    BillableClient_base: {
      /**
       * Unique identifier for the *BillableClient*
       */
      id?: number;
      /**
       * The unbilled hours of  the client
       */
      unbilled_hours?: number;
      /**
       * The unbilled amount of the client
       */
      unbilled_amount?: number;
      /**
       * The trust amount available for the client
       */
      amount_in_trust?: number;
      /**
       * The name of the Client
       */
      name?: string;
      /**
       * The total number of billable matters the client has
       */
      billable_matters_count?: number;
    };
    BillableClient: components["schemas"]["BillableClient_base"] & {
      /**
       * BillableMatter
       */
      billable_matters?: components["schemas"]["BillableMatter_base"][];
    };
    BillableClient_Events: {
      record?: components["schemas"]["BillableClient"];
      events?: components["schemas"]["EventDetail"][];
    };
    BillableClientList: {
      /**
       * BillableClient List Response
       */
      data: components["schemas"]["BillableClient"][];
    };
    BillableClientListEvent: {
      /**
       * BillableClient Event List Response
       */
      data: components["schemas"]["BillableClient_Events"][];
    };
    Report_base: {
      /**
       * Unique identifier for the *Report*
       */
      id?: number;
      /**
       * A specified name for the report
       */
      name?: string;
      /**
       * The current state of the report
       */
      state?:
        | "not_started"
        | "queued"
        | "in_progress"
        | "failed"
        | "completed"
        | "null";
      /**
       * The kind of report to generate
       */
      kind?:
        | "revenue"
        | "fee_allocation"
        | "trust_management"
        | "accounts_receivable_aging"
        | "finance_mrr"
        | "finance_purchases"
        | "general_ledger"
        | "law_society_of_alberta"
        | "law_society_of_alberta_al"
        | "law_society_of_alberta_bar"
        | "law_society_of_alberta_tl"
        | "law_society_of_alberta_tt"
        | "matter_productivity_by_user"
        | "other_revenue"
        | "invoice_payments_v2";
      /**
       * The requested format of the report
       */
      format?: "pdf" | "csv" | "html" | "zip";
      /**
       * The integer percentage of how complete the report is.
       */
      progress?: number;
      /**
       * The time the *Report* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Report* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    Report: components["schemas"]["Report_base"] & { [key: string]: any };
    Report_Events: {
      record?: components["schemas"]["Report"];
      events?: components["schemas"]["EventDetail"][];
    };
    ReportShow: { data: components["schemas"]["Report"] };
    PaymentPlan_base: {
      /**
       * Unique identifier for the *PaymentPlan*
       */
      id?: number;
      /**
       * ETag for the *PaymentPlan*
       */
      etag?: string;
      /**
       * PaymentPlan start date.
       */
      start_date?: string;
      /**
       * PaymentPlan stop date.
       */
      stop_date?: string;
      /**
       * Max amount for the PaymentPlan.
       */
      max_amount?: number;
      /**
       * The date the next payment will occur for this PaymentPlan.
       */
      next_payment_date?: string;
      /**
       * The time the *PaymentPlan* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *PaymentPlan* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * PaymentPlan amount per interval.
       */
      amount?: number;
      /**
       * The currency used to make a payment plan payment
       */
      currency?: string;
      /**
       * Whether or not the PaymentPlan is currently active.
       */
      state?: "active" | "inactive" | "completed";
      /**
       * The number of interval unit's between recurrences.
       */
      interval_delay?: number;
      /**
       * The unit used with the interval_delay to determine recurrences.
       */
      interval_unit?: string;
      /**
       * Payment plan schedule of payments for PaymentPlan.
       */
      schedule?: string;
      /**
       * The cardholder name of the PaymentPlan.
       */
      cardholder_name?: string;
      /**
       * The last four digits of the credit card used for the PaymentPlan
       */
      card_last_digits?: string;
      /**
       * The type or card used for the PaymentPlan
       */
      card_type?: string;
    };
    PaymentPlan: components["schemas"]["PaymentPlan_base"] & {
      contact?: components["schemas"]["Contact_base"];
      bank_account?: components["schemas"]["BankAccount_base"];
    };
    PaymentPlan_Events: {
      record?: components["schemas"]["PaymentPlan"];
      events?: components["schemas"]["EventDetail"][];
    };
    XeroAccount_base: { [key: string]: any };
    XeroAccount: components["schemas"]["XeroAccount_base"] & {
      [key: string]: any;
    };
    XeroAccount_Events: {
      record?: components["schemas"]["XeroAccount"];
      events?: components["schemas"]["EventDetail"][];
    };
    JobTitle_base: {
      /**
       * Unique identifier for the *JobTitle*
       */
      id?: number;
      /**
       * ETag for the *JobTitle*
       */
      etag?: string;
      /**
       * Name of the job title
       */
      name?: string;
      /**
       * Initials of the job title
       */
      initials?: string;
    };
    JobTitle: components["schemas"]["JobTitle_base"] & { [key: string]: any };
    JobTitle_Events: {
      record?: components["schemas"]["JobTitle"];
      events?: components["schemas"]["EventDetail"][];
    };
    DialpadAccount_base: { [key: string]: any };
    DialpadAccount: components["schemas"]["DialpadAccount_base"] & {
      [key: string]: any;
    };
    DialpadAccount_Events: {
      record?: components["schemas"]["DialpadAccount"];
      events?: components["schemas"]["EventDetail"][];
    };
    QuickbooksTrustAccountMapping_base: { [key: string]: any };
    QuickbooksTrustAccountMapping: components["schemas"]["QuickbooksTrustAccountMapping_base"] & {
      [key: string]: any;
    };
    QuickbooksTrustAccountMapping_Events: {
      record?: components["schemas"]["QuickbooksTrustAccountMapping"];
      events?: components["schemas"]["EventDetail"][];
    };
    BillingSetting_base: {
      /**
       * ETag for the *BillingSetting*
       */
      etag?: string;
      /**
       * Rounded equivalent of duration submitted
       */
      rounded_duration?: number;
      /**
       * Minute increment for time rounding
       */
      rounding?: number;
      /**
       * Round time to two decimal places
       */
      use_decimal_rounding?: boolean;
      /**
       * Current user setting of currency
       */
      currency?: string;
      /**
       * The sign of the current currency
       */
      currency_sign?: string;
      /**
       * Rate applied for primary tax on invoices using this BillingSetting
       */
      tax_rate?: number;
      /**
       * Name shown for primary tax on invoices using this BillingSetting
       */
      tax_name?: string;
      /**
       * Used to determine if primary tax should be applied to invoices by default
       */
      apply_tax_by_default?: boolean;
      /**
       * Used to determine if hourly time entries on flat rate or contingency fee matters should be non-billable by default
       */
      time_on_flat_rate_contingency_matters_is_non_billable?: boolean;
      /**
       * Used to determine if secondary tax applies to invoices using this BillingSetting
       */
      use_secondary_tax?: boolean;
      /**
       * Rate applied for secondary tax on invoices using this BillingSetting
       */
      secondary_tax_rate?: number;
      /**
       * Used to determine if secondary tax should be applied separately or additionally to primary tax
       */
      secondary_tax_rule?: "Pre" | "Post";
      /**
       * Name shown for secondary tax on invoices using this BillingSetting
       */
      secondary_tax_name?: string;
      /**
       * Flag to indicate if users should have the option to notify other users when generating a bill
       */
      notify_after_bill_created?: boolean;
      /**
       * Controls usage of UTBMS codes, allowing creation of coded time entries and expenses
       */
      use_utbms_codes?: boolean;
    };
    BillingSetting: components["schemas"]["BillingSetting_base"] & {
      [key: string]: any;
    };
    BillingSetting_Events: {
      record?: components["schemas"]["BillingSetting"];
      events?: components["schemas"]["EventDetail"][];
    };
    BillingSettingShow: { data: components["schemas"]["BillingSetting"] };
    BillingSyncFailure_base: { [key: string]: any };
    BillingSyncFailure: components["schemas"]["BillingSyncFailure_base"] & {
      [key: string]: any;
    };
    BillingSyncFailure_Events: {
      record?: components["schemas"]["BillingSyncFailure"];
      events?: components["schemas"]["EventDetail"][];
    };
    QuickbooksAccount_base: { [key: string]: any };
    QuickbooksAccount: components["schemas"]["QuickbooksAccount_base"] & {
      quickbooks_trust_account_mapping?: components["schemas"]["QuickbooksTrustAccountMapping_base"];
    };
    QuickbooksAccount_Events: {
      record?: components["schemas"]["QuickbooksAccount"];
      events?: components["schemas"]["EventDetail"][];
    };
    BillingServiceCustomer_base: { [key: string]: any };
    BillingServiceCustomer: components["schemas"]["BillingServiceCustomer_base"] & {
      [key: string]: any;
    };
    BillingServiceCustomer_Events: {
      record?: components["schemas"]["BillingServiceCustomer"];
      events?: components["schemas"]["EventDetail"][];
    };
    TextSnippet_base: {
      /**
       * Unique identifier for the *TextSnippet*
       */
      id?: number;
      /**
       * ETag for the *TextSnippet*
       */
      etag?: string;
      /**
       * The time the *TextSnippet* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *TextSnippet* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The abbreviation that should be expanded
       */
      snippet?: string;
      /**
       * The phrase the abbreviation should be expanded to
       */
      phrase?: string;
      /**
       * Whether the *TextSnippet* abbreviation requires a space after it has been entered to expand to a phrase
       */
      whole_word?: boolean;
    };
    TextSnippet: components["schemas"]["TextSnippet_base"] & {
      [key: string]: any;
    };
    TextSnippet_Events: {
      record?: components["schemas"]["TextSnippet"];
      events?: components["schemas"]["EventDetail"][];
    };
    TextSnippetShow: { data: components["schemas"]["TextSnippet"] };
    TextSnippetList: {
      /**
       * TextSnippet List Response
       */
      data: components["schemas"]["TextSnippet"][];
    };
    TextSnippetListEvent: {
      /**
       * TextSnippet Event List Response
       */
      data: components["schemas"]["TextSnippet_Events"][];
    };
    NotificationSubscription_base: {
      /**
       * Unique identifier for the *NotificationSubscription*
       */
      id?: number;
      /**
       * ETag for the *NotificationSubscription*
       */
      etag?: string;
      /**
       * Current user setting of notification subscriptions.
       */
      notifications?: string[];
      /**
       * The time the *NotificationSubscription* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *NotificationSubscription* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    NotificationSubscription: components["schemas"]["NotificationSubscription_base"] & {
      [key: string]: any;
    };
    NotificationSubscription_Events: {
      record?: components["schemas"]["NotificationSubscription"];
      events?: components["schemas"]["EventDetail"][];
    };
    PracticeArea_base: {
      /**
       * Unique identifier for the *PracticeArea*
       */
      id?: number;
      /**
       * ETag for the *PracticeArea*
       */
      etag?: string;
      /**
       * The time the *PracticeArea* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *PracticeArea* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The name of the *PracticeArea*
       */
      name?: string;
      /**
       * The code of the *PracticeArea*
       */
      code?: string;
    };
    PracticeArea: components["schemas"]["PracticeArea_base"] & {
      [key: string]: any;
    };
    PracticeArea_Events: {
      record?: components["schemas"]["PracticeArea"];
      events?: components["schemas"]["EventDetail"][];
    };
    PracticeAreaShow: { data: components["schemas"]["PracticeArea"] };
    PracticeAreaList: {
      /**
       * PracticeArea List Response
       */
      data: components["schemas"]["PracticeArea"][];
    };
    PracticeAreaListEvent: {
      /**
       * PracticeArea Event List Response
       */
      data: components["schemas"]["PracticeArea_Events"][];
    };
    ActivityDescriptionRate_base: {
      /**
       * Monetary value of this rate. Either hourly value or flat rate value
       */
      amount?: number;
      /**
       * Monetary value of this rate for non billable activities. Either hourly value or flat rate value
       */
      non_billable_amount?: number;
      /**
       * What kind of rate it is.
       */
      type?: "User" | "FlatRate" | "Custom";
      /**
       * What rate hierarchy the rate belongs to.
       */
      hierarchy?: "Default" | "Activity" | "Matter" | "Client";
    };
    ActivityDescriptionRate: components["schemas"]["ActivityDescriptionRate_base"] & {
      [key: string]: any;
    };
    ActivityDescriptionRate_Events: {
      record?: components["schemas"]["ActivityDescriptionRate"];
      events?: components["schemas"]["EventDetail"][];
    };
    CalendarVisibility_base: {
      /**
       * Unique identifier for the *CalendarVisibility*
       */
      id?: string;
      /**
       * ETag for the *CalendarVisibility*
       */
      etag?: string;
      /**
       * Calendar color
       */
      color?:
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]";
      /**
       * Accent color to complement the main calendar color.
       */
      light_color?:
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]";
      /**
       * Whether the *CalendarVisibility* will be shown by default in the Clio Web UI.
       */
      visible?: boolean;
      /**
       * Calendar name
       */
      name?: boolean;
      /**
       * The time the *CalendarVisibility* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *CalendarVisibility* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    CalendarVisibility: components["schemas"]["CalendarVisibility_base"] & {
      [key: string]: any;
    };
    CalendarVisibility_Events: {
      record?: components["schemas"]["CalendarVisibility"];
      events?: components["schemas"]["EventDetail"][];
    };
    CalendarVisibilityShow: {
      data: components["schemas"]["CalendarVisibility"];
    };
    CalendarVisibilityList: {
      /**
       * CalendarVisibility List Response
       */
      data: components["schemas"]["CalendarVisibility"][];
    };
    CalendarVisibilityListEvent: {
      /**
       * CalendarVisibility Event List Response
       */
      data: components["schemas"]["CalendarVisibility_Events"][];
    };
    UtbmsSet_base: {
      /**
       * Unique identifier for the *UtbmsSet*
       */
      id?: number;
      /**
       * ETag for the *UtbmsSet*
       */
      etag?: string;
      /**
       * The name of the *UtbmsSet*
       */
      name?: string;
      /**
       * Whether the *UtbmsSet* is enabled for the current account.
       */
      enabled?: boolean;
      /**
       * The time the *UtbmsSet* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *UtbmsSet* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    UtbmsSet: components["schemas"]["UtbmsSet_base"] & { [key: string]: any };
    UtbmsSet_Events: {
      record?: components["schemas"]["UtbmsSet"];
      events?: components["schemas"]["EventDetail"][];
    };
    UtbmsSetList: {
      /**
       * UtbmsSet List Response
       */
      data: components["schemas"]["UtbmsSet"][];
    };
    UtbmsSetListEvent: {
      /**
       * UtbmsSet Event List Response
       */
      data: components["schemas"]["UtbmsSet_Events"][];
    };
    UtbmsCode_base: {
      /**
       * Unique identifier for the *UtbmsCode*
       */
      id?: number;
      /**
       * ETag for the *UtbmsCode*
       */
      etag?: string;
      /**
       * The name of the *UtbmsCode*
       */
      name?: string;
      /**
       * The UTBMS code for the *UtbmsCode*
       */
      code?: string;
      /**
       * The UTBMS description for the *UtbmsCode*
       */
      description?: string;
      /**
       * The type of the *UtbmsCode*
       */
      type?: "UtbmsTask" | "UtbmsExpense" | "UtbmsActivity";
      /**
       * Set id for the *UtbmsCode*
       */
      utbms_set_id?: number;
      /**
       * The time the *UtbmsCode* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *UtbmsCode* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    UtbmsCode: components["schemas"]["UtbmsCode_base"] & { [key: string]: any };
    UtbmsCode_Events: {
      record?: components["schemas"]["UtbmsCode"];
      events?: components["schemas"]["EventDetail"][];
    };
    UtbmsCodeShow: { data: components["schemas"]["UtbmsCode"] };
    UtbmsCodeList: {
      /**
       * UtbmsCode List Response
       */
      data: components["schemas"]["UtbmsCode"][];
    };
    UtbmsCodeListEvent: {
      /**
       * UtbmsCode Event List Response
       */
      data: components["schemas"]["UtbmsCode_Events"][];
    };
    ClioPaymentsMerchantAccountMapping_base: {
      /**
       * Unique identifier for the *ClioPaymentsMerchantAccountMapping*
       */
      id?: number;
      /**
       * ETag for the *ClioPaymentsMerchantAccountMapping*
       */
      etag?: string;
      /**
       * The ID of the bank account.
       */
      bank_account_id?: number;
      /**
       * The ID of the merchant account.
       */
      merchant_account_id?: number;
      /**
       * The ID of the internal payments gateway.
       */
      external_id?: number;
      /**
       * The name of the Clio Payments merchant account.
       */
      merchant_account_name?: string;
      /**
       * Whether or not the CVV is required by the merchant account.
       */
      is_cvv_required?: boolean;
      /**
       * The fields required by the merchant account.
       */
      required_fields?: string;
      /**
       * The time the *ClioPaymentsMerchantAccountMapping* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *ClioPaymentsMerchantAccountMapping* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    ClioPaymentsMerchantAccountMapping: components["schemas"]["ClioPaymentsMerchantAccountMapping_base"] & {
      [key: string]: any;
    };
    ClioPaymentsMerchantAccountMapping_Events: {
      record?: components["schemas"]["ClioPaymentsMerchantAccountMapping"];
      events?: components["schemas"]["EventDetail"][];
    };
    Attendee_base: {
      /**
       * Unique identifier for the *Attendee*
       */
      id?: number;
      /**
       * The class name of the *Attendee*
       */
      type?: "Contact" | "Calendar";
      /**
       * The name of the *Attendee*
       */
      name?: string;
      /**
       * If the Attendee is a user, represents whether the user is enabled or disabled. Returns null if attendee is a Contact.
       */
      enabled?: boolean;
      /**
       * If the Attendee is a User, this is the User's email. If the Attendee is a contact, this is the Contact's primary email address.
       */
      email?: string;
    };
    Attendee: components["schemas"]["Attendee_base"] & {
      user?: components["schemas"]["User_base"];
      /**
       * NotificationMethod
       */
      notification_methods?: components["schemas"]["NotificationMethod_base"][];
    };
    Attendee_Events: {
      record?: components["schemas"]["Attendee"];
      events?: components["schemas"]["EventDetail"][];
    };
    ClioPaymentsDistribution_base: {
      /**
       * Unique identifier for the *ClioPaymentsDistribution*
       */
      id?: number;
      /**
       * ETag for the *ClioPaymentsDistribution*
       */
      etag?: string;
      /**
       * Portion of the parent Clio Payments payment/refund allocated to the associated bill
       */
      amount?: number;
    };
    ClioPaymentsDistribution: components["schemas"]["ClioPaymentsDistribution_base"] & {
      bill?: components["schemas"]["Bill_base"];
    };
    ClioPaymentsDistribution_Events: {
      record?: components["schemas"]["ClioPaymentsDistribution"];
      events?: components["schemas"]["EventDetail"][];
    };
    WorkReassignmentStep_base: {
      /**
       * Unique identifier for the *WorkReassignmentStep*
       */
      id?: number;
      /**
       * The account.
       */
      account_id?: number;
      /**
       * The id of the reassigned work.
       */
      resource_id?: number;
      /**
       * The type of the reassigned work.
       */
      resource_type?: string;
      /**
       * The name of the reassigned work.
       */
      resource_name?: string;
      /**
       * The name of associated matter of the reassigned work.
       */
      associated_matter_name?: string;
      /**
       * The name of the user who is receiving the reassigned work.
       */
      assignee_name?: string;
      /**
       * The work reassignment that this work_reassignment_step belongs to.
       */
      work_reassignment_id?: number;
      /**
       * The time the work reassignment step was completed.
       */
      completed_at?: string;
      /**
       * The time the *WorkReassignmentStep* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *WorkReassignmentStep* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    WorkReassignmentStep: components["schemas"]["WorkReassignmentStep_base"] & {
      [key: string]: any;
    };
    WorkReassignmentStep_Events: {
      record?: components["schemas"]["WorkReassignmentStep"];
      events?: components["schemas"]["EventDetail"][];
    };
    ClientConnectPermission_base: {
      /**
       * Unique identifier for the *ClientConnectPermission*
       */
      id?: number;
      /**
       * ETag for the *ClientConnectPermission*
       */
      etag?: string;
    };
    ClientConnectPermission: components["schemas"]["ClientConnectPermission_base"] & {
      contact?: components["schemas"]["Contact_base"];
    };
    ClientConnectPermission_Events: {
      record?: components["schemas"]["ClientConnectPermission"];
      events?: components["schemas"]["EventDetail"][];
    };
    BillTheme_base: {
      /**
       * Unique identifier for the *BillTheme*
       */
      id?: number;
      /**
       * ETag for the *BillTheme*
       */
      etag?: string;
      /**
       * The time the *BillTheme* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *BillTheme* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The account number the *BillTheme* belongs to
       */
      account_id?: number;
      /**
       * Whether the *BillTheme* is the default for its account
       */
      default?: boolean;
      /**
       * The name of the *BillTheme*
       */
      name?: string;
      /**
       * The configuration of the *BillTheme*
       */
      config?: string;
    };
    BillTheme: components["schemas"]["BillTheme_base"] & { [key: string]: any };
    BillTheme_Events: {
      record?: components["schemas"]["BillTheme"];
      events?: components["schemas"]["EventDetail"][];
    };
    BillThemeShow: { data: components["schemas"]["BillTheme"] };
    BillThemeList: {
      /**
       * BillTheme List Response
       */
      data: components["schemas"]["BillTheme"][];
    };
    BillThemeListEvent: {
      /**
       * BillTheme Event List Response
       */
      data: components["schemas"]["BillTheme_Events"][];
    };
    ActivityRate_base: {
      /**
       * Unique identifier for the *ActivityRate*
       */
      id?: number;
      /**
       * ETag for the *ActivityRate*
       */
      etag?: string;
      /**
       * Monetary value of this rate. Either hourly value or flat rate value
       */
      rate?: number;
      /**
       * Whether this is a flat rate
       */
      flat_rate?: boolean;
      /**
       * The time the *ActivityRate* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *ActivityRate* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * Filter ActivityRate records for the contact.
       */
      contact_id?: number;
      /**
       * Filter ActivityRate records for the co-counsel.
       */
      co_counsel_contact_id?: number;
    };
    ActivityRate: components["schemas"]["ActivityRate_base"] & {
      user?: components["schemas"]["User_base"];
      group?: components["schemas"]["Group_base"];
    };
    ActivityRate_Events: {
      record?: components["schemas"]["ActivityRate"];
      events?: components["schemas"]["EventDetail"][];
    };
    ActivityRateShow: { data: components["schemas"]["ActivityRate"] };
    ActivityRateList: {
      /**
       * ActivityRate List Response
       */
      data: components["schemas"]["ActivityRate"][];
    };
    ActivityRateListEvent: {
      /**
       * ActivityRate Event List Response
       */
      data: components["schemas"]["ActivityRate_Events"][];
    };
    ImportDetail_base: {
      /**
       * Unique identifier for the *ImportDetail*
       */
      id?: number;
      /**
       * ETag for the *ImportDetail*
       */
      etag?: string;
      /**
       * The current status of the import
       */
      status?:
        | "not_started"
        | "queued"
        | "in_progress"
        | "failed"
        | "completed"
        | "null";
      /**
       * The source of the import
       */
      source?: "custom";
      /**
       * The importer type of the import
       */
      importer_type?:
        | "contact"
        | "note"
        | "matter"
        | "activity"
        | "task"
        | "relationship"
        | "calendar_entry"
        | "custom_field"
        | "document"
        | "communication"
        | "user";
      /**
       * The file type of the import
       */
      file_type?: "csv" | "ical" | "vcard";
      /**
       * Whether the import has mappings have been defined
       */
      has_mappings?: boolean;
      /**
       * The time the *ImportDetail* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The time the *ImportDetail* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The number of bytes from the import file that have been processed or are being processed
       */
      byte_offset?: number;
      /**
       * The size of the import file in bytes
       */
      file_size?: number;
      /**
       * Whether an error file is available for download
       */
      error_file_available?: boolean;
      /**
       * The number of records successfully created
       */
      record_count?: number;
      /**
       * The number of records successfully updated
       */
      updated_record_count?: number;
      /**
       * The number of errors generated
       */
      error_count?: number;
      /**
       * The fatal error message if it exists
       */
      fatal_error_message?: string;
      /**
       * Whether this import has been undone
       */
      undone?: boolean;
      /**
       * Whether this import has been stopped
       */
      stopped?: boolean;
      /**
       * The name of the uploaded import file
       */
      original_filename?: string;
    };
    ImportDetail: components["schemas"]["ImportDetail_base"] & {
      /**
       * ImportMapping
       */
      import_mappings?: components["schemas"]["ImportMapping_base"][];
    };
    ImportDetail_Events: {
      record?: components["schemas"]["ImportDetail"];
      events?: components["schemas"]["EventDetail"][];
    };
    ImportDetailShow: { data: components["schemas"]["ImportDetail"] };
    ImportDetailList: {
      /**
       * ImportDetail List Response
       */
      data: components["schemas"]["ImportDetail"][];
    };
    ImportDetailListEvent: {
      /**
       * ImportDetail Event List Response
       */
      data: components["schemas"]["ImportDetail_Events"][];
    };
    SecureLink_base: {
      /**
       * Unique identifier for the *SecureLink*
       */
      id?: number;
      /**
       * ETag for the *SecureLink*
       */
      etag?: string;
      /**
       * The URL of the of the payment page for the given bill or contact
       */
      url?: string;
    };
    SecureLink: components["schemas"]["SecureLink_base"] & {
      [key: string]: any;
    };
    SecureLink_Events: {
      record?: components["schemas"]["SecureLink"];
      events?: components["schemas"]["EventDetail"][];
    };
    Note_base: {
      /**
       * Unique identifier for the *Note*
       */
      id?: number;
      /**
       * ETag for the *Note*
       */
      etag?: string;
      /**
       * The type of the *Note*
       */
      type?: "MatterNote" | "ContactNote";
      /**
       * The subject of the *Note*
       */
      subject?: string;
      /**
       * The body of the *Note*
       */
      detail?: string;
      /**
       * The date the *Note* is for (as a ISO-8601 date)
       */
      date?: string;
      /**
       * The time the *Note* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Note* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The number of time_entries associated with the *Note*
       */
      time_entries_count?: number;
    };
    Note: components["schemas"]["Note_base"] & {
      matter?: components["schemas"]["Matter_base"];
      contact?: components["schemas"]["Contact_base"];
      author?: components["schemas"]["User_base"];
      /**
       * Activity
       */
      time_entries?: components["schemas"]["Activity_base"][];
    };
    Note_Events: {
      record?: components["schemas"]["Note"];
      events?: components["schemas"]["EventDetail"][];
    };
    NoteShow: { data: components["schemas"]["Note"] };
    NoteList: {
      /**
       * Note List Response
       */
      data: components["schemas"]["Note"][];
    };
    NoteListEvent: {
      /**
       * Note Event List Response
       */
      data: components["schemas"]["Note_Events"][];
    };
    Currency_base: {
      /**
       * Unique identifier for the *Currency*
       */
      id?: number;
      /**
       * ETag for the *Currency*
       */
      etag?: string;
      /**
       * ISO 4217 code for the *Currency*
       */
      code?: string;
      /**
       * Symbol used to denote monetary values using this *Currency*
       */
      sign?: string;
      /**
       * The time the *Currency* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Currency* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    Currency: components["schemas"]["Currency_base"] & { [key: string]: any };
    Currency_Events: {
      record?: components["schemas"]["Currency"];
      events?: components["schemas"]["EventDetail"][];
    };
    CurrencyList: {
      /**
       * Currency List Response
       */
      data: components["schemas"]["Currency"][];
    };
    CurrencyListEvent: {
      /**
       * Currency Event List Response
       */
      data: components["schemas"]["Currency_Events"][];
    };
    NotificationMethod_base: {
      /**
       * Unique identifier for the *NotificationMethod*
       */
      id?: number;
      /**
       * ETag for the *NotificationMethod*
       */
      etag?: string;
      /**
       * Human readable description of the type of notification
       */
      type?: "Email" | "Popup";
      /**
       * Email address to send the notification to (only for email type)
       */
      email_address?: string;
      /**
       * A boolean that is returned only on notification method objects that are relevant e.g. Email notification or Alternative Email
       */
      is_default_email_address?: boolean;
      /**
       * The time the *NotificationMethod* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *NotificationMethod* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    NotificationMethod: components["schemas"]["NotificationMethod_base"] & {
      user?: components["schemas"]["User_base"];
      user_for_reminder?: components["schemas"]["NotificationMethod_User_base"];
    };
    NotificationMethod_Events: {
      record?: components["schemas"]["NotificationMethod"];
      events?: components["schemas"]["EventDetail"][];
    };
    NotificationMethod_User_base: {
      /**
       * Whether the *User* is a Clio Connect user
       */
      clio_connect?: boolean;
      /**
       * Whether the *User* is allowed to log in
       */
      enabled?: boolean;
      /**
       * The first name of the *User*
       */
      first_name?: string;
      /**
       * Unique identifier for the *User*
       */
      id?: number;
      /**
       * The last name of the *User*
       */
      last_name?: string;
      /**
       * The full name of the *User*
       */
      name?: string;
    };
    ReminderTemplate_base: {
      /**
       * Unique identifier for the *ReminderTemplate*
       */
      id?: number;
      /**
       * ETag for the *ReminderTemplate*
       */
      etag?: string;
      /**
       * The time in minutes to remind user before the subject.
       */
      duration?: number;
      /**
       * The type of method to be notified by
       */
      notification_type?: "Email" | "Popup";
      /**
       * The time the *ReminderTemplate* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *ReminderTemplate* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    ReminderTemplate: components["schemas"]["ReminderTemplate_base"] & {
      [key: string]: any;
    };
    ReminderTemplate_Events: {
      record?: components["schemas"]["ReminderTemplate"];
      events?: components["schemas"]["EventDetail"][];
    };
    BulkAction_base: {
      /**
       * Unique identifier for the *BulkAction*
       */
      id?: number;
      /**
       * ETag for the *BulkAction*
       */
      etag?: string;
      /**
       * The current status of the *BulkAction* request
       */
      status?:
        | "not_started"
        | "queued"
        | "in_progress"
        | "failed"
        | "completed"
        | "stalled_out"
        | "canceled";
      /**
       * Number of request actions performed
       */
      performed?: number;
      /**
       * Estimated total number of request actions. When the data set has 10,000 records or less, it is the actual number of request actions. When the data set has more than 10,000 records, it is an estimation based on the total number of records for the account. It is usually higher than the actual number of requested actions. When the bulk action finishes, it is updated to the number of request actions performed.
       */
      requested?: number;
      /**
       * The time the last action performed (as a ISO-8601 timestamp)
       */
      last_action_performed_at?: string;
      /**
       * The URL where the response can be downloaded. It is only available once the *BulkAction* is complete.
       */
      response_url?: string;
      /**
       * The time the *BulkAction* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *BulkAction* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    BulkAction: components["schemas"]["BulkAction_base"] & {
      [key: string]: any;
    };
    BulkAction_Events: {
      record?: components["schemas"]["BulkAction"];
      events?: components["schemas"]["EventDetail"][];
    };
    BulkActionShow: { data: components["schemas"]["BulkAction"] };
    BulkActionList: {
      /**
       * BulkAction List Response
       */
      data: components["schemas"]["BulkAction"][];
    };
    BulkActionListEvent: {
      /**
       * BulkAction Event List Response
       */
      data: components["schemas"]["BulkAction_Events"][];
    };
    ConversationMembership_base: {
      /**
       * Unique identifier for the *ConversationMembership*
       */
      id?: number;
      /**
       * ETag for the *ConversationMembership*
       */
      etag?: string;
      /**
       * Whether or not the ConversationMembership has been read by the member
       */
      read?: boolean;
      /**
       * Whether or not the ConversationMembership has been archived by the member
       */
      archived?: boolean;
      /**
       * The time the *ConversationMembership* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *ConversationMembership* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    ConversationMembership: components["schemas"]["ConversationMembership_base"] & {
      member?: components["schemas"]["Participant_base"];
    };
    ConversationMembership_Events: {
      record?: components["schemas"]["ConversationMembership"];
      events?: components["schemas"]["EventDetail"][];
    };
    MicrosoftTeamsMatter_base: {
      /**
       * Unique identifier for the *MicrosoftTeamsMatter*
       */
      id?: number;
      /**
       * ETag for the *MicrosoftTeamsMatter*
       */
      etag?: string;
      /**
       * The current status of the *MicrosoftTeamsMatter*
       */
      state?: string;
      /**
       * The url of the associated Microsoft Team
       */
      web_url?: string;
    };
    MicrosoftTeamsMatter: components["schemas"]["MicrosoftTeamsMatter_base"] & {
      [key: string]: any;
    };
    MicrosoftTeamsMatter_Events: {
      record?: components["schemas"]["MicrosoftTeamsMatter"];
      events?: components["schemas"]["EventDetail"][];
    };
    BillMessageTemplate_base: {
      /**
       * The time the *BillMessageTemplate* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * ETag for the *BillMessageTemplate*
       */
      etag?: string;
      /**
       * Unique identifier for the *BillMessageTemplate*
       */
      id?: number;
      /**
       * The message body of the email.
       */
      message?: string;
      /**
       * The name used to identify the bill message template.
       */
      name?: string;
      /**
       * Indicates in which sharing context this template will be selected as default. If 'null', then record is a custom message template.
       */
      share_context?: string;
      /**
       * The subject line of the email.
       */
      subject?: string;
      /**
       * The time the *BillMessageTemplate* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    BillMessageTemplate: components["schemas"]["BillMessageTemplate_base"] & {
      [key: string]: any;
    };
    BillMessageTemplate_Events: {
      record?: components["schemas"]["BillMessageTemplate"];
      events?: components["schemas"]["EventDetail"][];
    };
    Payment_base: {
      /**
       * Unique identifier for the *Payment*
       */
      id?: number;
      /**
       * ETag for the *Payment*
       */
      etag?: string;
      /**
       * A detailed description of the *Payment*
       */
      description?: string;
      /**
       * A reference for the payment
       */
      reference?: string;
      /**
       * Total amount paid. The default is 0.00.
       */
      amount?: number;
      /**
       * The date the *Payment* was recorded (as a ISO-8601 date)
       */
      date?: string;
      /**
       * The fund type for *Payment* source
       */
      source_fund_type?: "Client" | "Matter";
      /**
       * Time the *Payment* was voided (as a ISO-8601 timestamp)
       */
      voided_at?: string;
      /**
       * The time the *Payment* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Payment* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    Payment: components["schemas"]["Payment_base"] & {
      contact?: components["schemas"]["Contact_base"];
      user?: components["schemas"]["User_base"];
      source_bank_account?: components["schemas"]["BankAccount_base"];
      destination_bank_account?: components["schemas"]["BankAccount_base"];
      /**
       * Allocation
       */
      allocations?: components["schemas"]["Allocation_base"][];
    };
    Payment_Events: {
      record?: components["schemas"]["Payment"];
      events?: components["schemas"]["EventDetail"][];
    };
    PaymentProfile_base: {
      /**
       * Unique identifier for the *PaymentProfile*
       */
      id?: number;
      /**
       * ETag for the *PaymentProfile*
       */
      etag?: string;
      /**
       * The unique identifier for the *PaymentProfile
       */
      billing_setting_id?: number;
      /**
       * The name of the *PaymentProfile
       */
      name?: string;
      /**
       * The total grace period for the *PaymentProfile
       */
      terms?: number;
      /**
       * The early payment discount rate for the *PaymentProfile
       */
      discount_rate?: number;
      /**
       * The early payment discount period for the *PaymentProfile
       */
      discount_period?: number;
      /**
       * The interest rate for the *PaymentProfile
       */
      interest_rate?: number;
      /**
       * The interest period interval for the *PaymentProfile
       */
      interest_period?: number;
      /**
       * The type of interest to be calculated for the *PaymentProfile (Simple or Compound)
       */
      interest_type?: "simple" | "compound";
    };
    PaymentProfile: components["schemas"]["PaymentProfile_base"] & {
      [key: string]: any;
    };
    PaymentProfile_Events: {
      record?: components["schemas"]["PaymentProfile"];
      events?: components["schemas"]["EventDetail"][];
    };
    SharedResource_base: {
      /**
       * Unique identifier for the *SharedResource*
       */
      id?: number;
      /**
       * ETag for the *SharedResource*
       */
      etag?: string;
      /**
       * The time the *SharedResource* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *SharedResource* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The type of the resource being shared.
       */
      resource_type?: string;
      /**
       * The ID of the resource being shared.
       */
      resource_id?: number;
    };
    SharedResource: components["schemas"]["SharedResource_base"] & {
      /**
       * Contact
       */
      contacts?: components["schemas"]["Contact_base"][];
      /**
       * ContactWithShareMethod
       */
      contacts_for_bill_share?: components["schemas"]["ContactWithShareMethod_base"][];
    };
    SharedResource_Events: {
      record?: components["schemas"]["SharedResource"];
      events?: components["schemas"]["EventDetail"][];
    };
    ClioPayments_base: {
      /**
       * Identifier for the Clio account associated with the ClioPayments
       */
      account_id?: number;
      /**
       * The total amount for the ClioPayments
       */
      amount?: number;
      /**
       * The amount of the ClioPayments that has been refunded.
       */
      amount_refunded?: number;
      /**
       * The authorization code used for the ClioPayments
       */
      authorization_code?: string;
      /**
       * The billing address city of the ClioPayments.
       */
      billing_address_city?: string;
      /**
       * The billing address country of the ClioPayments.
       */
      billing_address_country?: string;
      /**
       * The billing address state of the ClioPayments.
       */
      billing_address_state?: string;
      /**
       * The billing address street of the ClioPayments.
       */
      billing_address_street?: string;
      /**
       * The billing address postal code of the ClioPayments.
       */
      billing_address_postal_code?: string;
      /**
       * The card expiration month of the ClioPayments.
       */
      card_expiration_month?: number;
      /**
       * The card expiration year of the ClioPayments.
       */
      card_expiration_year?: number;
      /**
       * The card name of the ClioPayments.
       */
      card_name?: string;
      /**
       * The last four digits of the credit card used for the ClioPayments
       */
      card_number?: string;
      /**
       * The type or card used for the ClioPayments
       */
      card_type?: string;
      /**
       * The time the *ClioPayments* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The applicable currency the ClioPayments is in
       */
      currency?: string;
      /**
       * The email of the payer for the ClioPayments.
       */
      email?: string;
      /**
       * A detailed description for the *ClioPayments*
       */
      description?: string;
      /**
       * The text version of the description for the *ClioPayments* displayed in Transactions List.
       */
      description_for_export?: string;
      /**
       * ETag for the *ClioPayments*
       */
      etag?: string;
      /**
       * Whether or not the ClioPayments was for a trust account.
       */
      for_trust_account?: boolean;
      /**
       * Unique identifier for the *ClioPayments*
       */
      id?: number;
      /**
       * The time of the last event recorded for the ClioPayments
       */
      last_event_at?: string;
      /**
       * The source of the ClioPayments.
       */
      origin?: number;
      /**
       * A string indicating whether the payment is a payment or refund.
       */
      payment_type_string?: string;
      /**
       * Whether or not the ClioPayments has been received by the lawyer (applicable when the automatic bill payment record creation failed)
       */
      received_by_lawyer?: boolean;
      /**
       * Whether or not the ClioPayments can be refunded
       */
      refundable?: boolean;
      /**
       * The state of the ClioPayments
       */
      state?: "pending" | "authorized" | "completed" | "voided" | "failed";
      /**
       * The ClioPayments transaction_id.
       */
      token?: string;
      /**
       * If the ClioPayments is a refund, the type will be 1.
       */
      type?: number;
      /**
       * The time the *ClioPayments* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The total amount of pending and completed refunds on the ClioPayments.
       */
      valid_clio_payments_refunds_sum?: number;
    };
    ClioPayments: components["schemas"]["ClioPayments_base"] & {
      account?: components["schemas"]["Account_base"];
      bill?: components["schemas"]["Bill_base"];
      bank_account?: components["schemas"]["BankAccount_base"];
      client?: components["schemas"]["Contact_base"];
      clio_payments_payment?: components["schemas"]["ClioPayments_base"];
      matter?: components["schemas"]["Matter_base"];
      payment?: components["schemas"]["Payment_base"];
      payment_plan?: components["schemas"]["PaymentPlan_base"];
      user?: components["schemas"]["User_base"];
      /**
       * Bill
       */
      bills?: components["schemas"]["Bill_base"][];
      /**
       * ClioPaymentsDistribution
       */
      payment_distributions?: components["schemas"]["ClioPaymentsDistribution_base"][];
      /**
       * ClioPaymentsDistribution
       */
      refund_distributions?: components["schemas"]["ClioPaymentsDistribution_base"][];
      /**
       * ClioPayments
       */
      valid_clio_payments_refunds?: components["schemas"]["ClioPayments_base"][];
    };
    ClioPayments_Events: {
      record?: components["schemas"]["ClioPayments"];
      events?: components["schemas"]["EventDetail"][];
    };
    Calendar_base: {
      /**
       * Unique identifier for the *Calendar*
       */
      id?: number;
      /**
       * ETag for the *Calendar*
       */
      etag?: string;
      /**
       * Color
       */
      color?:
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]";
      /**
       * Accent color to complement the main calendar color.
       */
      light_color?:
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]"
        | "[object Object]";
      /**
       * Whether the calendar is default court rules calendar for current user
       */
      court_rules_default_calendar?: boolean;
      /**
       * The name of the *Calendar*
       */
      name?: string;
      /**
       * The user's permission to the *Calendar*
       */
      permission?: "owner" | "editor" | "viewer" | "limited_viewer" | "none";
      /**
       * The type of the *Calendar*
       */
      type?: "AccountCalendar" | "AdhocCalendar" | "UserCalendar";
      /**
       * Whether the *Calendar* will be shown by default in the Clio Web UI (assuming no source is provided).
       */
      visible?: boolean;
      /**
       * The time the *Calendar* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Calendar* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The source that visible applies to, by default the Clio Web UI (Expects 'mobile' or 'web').
       */
      source?: "web" | "mobile";
    };
    Calendar: components["schemas"]["Calendar_base"] & {
      creator?: components["schemas"]["User_base"];
    };
    Calendar_Events: {
      record?: components["schemas"]["Calendar"];
      events?: components["schemas"]["EventDetail"][];
    };
    CalendarShow: { data: components["schemas"]["Calendar"] };
    CalendarList: {
      /**
       * Calendar List Response
       */
      data: components["schemas"]["Calendar"][];
    };
    CalendarListEvent: {
      /**
       * Calendar Event List Response
       */
      data: components["schemas"]["Calendar_Events"][];
    };
    Bill_base: {
      /**
       * Unique identifier for the *Bill*
       */
      id?: number;
      /**
       * ETag for the *Bill*
       */
      etag?: string;
      /**
       * The *Bill* identifier (not necessarily numeric)'
       */
      number?: string;
      /**
       * The time the *Bill* was issued (as a ISO-8601 date)
       */
      issued_at?: string;
      /**
       * The time the *Bill* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The date the *Bill* is due (as a ISO-8601 date)
       */
      due_at?: string;
      /**
       * The tax rate to the *Bill*
       */
      tax_rate?: number;
      /**
       * A secondary tax rate applied to the *Bill*
       */
      secondary_tax_rate?: number;
      /**
       * The time the *Bill* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The subject of the *Bill*
       */
      subject?: string;
      /**
       * The purchase order of the *Bill*
       */
      purchase_order?: string;
      /**
       * The type of the *Bill*
       */
      type?: "MatterBill" | "ClientBill";
      /**
       * A memo for the *Bill*
       */
      memo?: string;
      /**
       * The time the billing period starts (as a ISO-8601 date)
       */
      start_at?: string;
      /**
       * The time the billing period ends (as a ISO-8601 date)
       */
      end_at?: string;
      /**
       * The outstanding balance of the *Bill*
       */
      balance?: number;
      /**
       * A string containing bill theme settings for the Bill preview that are specific to this Bill.
       *
       * To learn more about this field, refer to the [bill themes](#operation/BillTheme%23update) documentation.
       *
       * Values in this string will override the bill theme settings when displaying this Bill.
       * Any values not present in this string will default to using the settings present in the bill theme for this Bill,
       * or to the default settings for those values if it is also undefined in the bill theme.
       */
      config?: string;
      /**
       * The billing state the *Bill* is in
       */
      state?:
        | "draft"
        | "awaiting_approval"
        | "awaiting_payment"
        | "paid"
        | "void"
        | "deleted";
      /**
       * The kind of the *Bill*
       */
      kind?:
        | "revenue_kind"
        | "summary_kind"
        | "trust_kind"
        | "aggregate_all"
        | "aggregate_split"
        | "aggregate_services"
        | "aggregate_expenses";
      /**
       * The total with interest of the *Bill*
       */
      total?: number;
      /**
       * The total amount paid for the *Bill*
       */
      paid?: number;
      /**
       * The date of the last payment on the *Bill*
       */
      paid_at?: string;
      /**
       * The amount of pending credit card payments on the *Bill*
       */
      pending?: number;
      /**
       * The total amount of the *Bill* with interest and less discounts
       */
      due?: number;
      /**
       * The selected discount is applied to services only.
       */
      discount_services_only?: string;
      /**
       * This value indicates if your *Bill*'s line items and information can be updated.
       */
      can_update?: boolean;
      /**
       * The total credits issued for the *Bill*
       */
      credits_issued?: number;
      /**
       * Whether the *Bill* is a shared
       */
      shared?: boolean;
      /**
       * The last time the *Bill* was sent (as a ISO-8601 date)
       */
      last_sent_at?: string;
      /**
       * The total secondary tax of the bill's line items of a service kind
       */
      services_secondary_tax?: number;
      /**
       * The sub total of all the bill's line items of a service kind
       */
      services_sub_total?: number;
      /**
       * The total tax of the bill's line items of a service kind
       */
      services_tax?: number;
      /**
       * The services portion of the bill's primary tax
       */
      services_taxable_sub_total?: number;
      /**
       * The services portion of the bill's secondary tax
       */
      services_secondary_taxable_sub_total?: number;
      /**
       * The total taxable bill amount
       */
      taxable_sub_total?: number;
      /**
       * The subtotal of the bill's secondary tax
       */
      secondary_taxable_sub_total?: number;
      /**
       * Sub total for the *Bill*
       */
      sub_total?: number;
      /**
       * Sum of primary tax for the model
       */
      tax_sum?: number;
      /**
       * Sum of secondary tax for the model
       */
      secondary_tax_sum?: number;
      /**
       * The available *Bill* state transitions.
       */
      available_state_transitions?:
        | "awaiting_approval"
        | "awaiting_payment"
        | "paid"
        | "void"
        | "deleted";
    };
    Bill: components["schemas"]["Bill_base"] & {
      user?: components["schemas"]["User_base"];
      client?: components["schemas"]["Contact_base"];
      discount?: components["schemas"]["Discount_base"];
      interest?: components["schemas"]["Interest_base"];
      /**
       * Matter
       */
      matters?: components["schemas"]["Matter_base"][];
      group?: components["schemas"]["Group_base"];
      bill_theme?: components["schemas"]["BillTheme_base"];
      original_bill?: components["schemas"]["Bill_base"];
      destination_account?: components["schemas"]["BankAccount_base"];
      /**
       * Balance
       */
      balances?: components["schemas"]["Balance_base"][];
      /**
       * MatterBalance
       */
      matter_totals?: components["schemas"]["MatterBalance_base"][];
      currency?: components["schemas"]["Currency_base"];
      billing_setting?: components["schemas"]["BillingSetting_base"];
      /**
       * Address
       */
      client_addresses?: components["schemas"]["Address_base"][];
    };
    Bill_Events: {
      record?: components["schemas"]["Bill"];
      events?: components["schemas"]["EventDetail"][];
    };
    BillShow: { data: components["schemas"]["Bill"] };
    BillList: {
      /**
       * Bill List Response
       */
      data: components["schemas"]["Bill"][];
    };
    BillListEvent: {
      /**
       * Bill Event List Response
       */
      data: components["schemas"]["Bill_Events"][];
    };
    CustomFieldValue_base: {
      /**
       * Unique identifier for the *CustomFieldValue*
       */
      id?: string;
      /**
       * ETag for the *CustomFieldValue*
       */
      etag?: string;
      /**
       * The name of the custom field
       */
      field_name?: string;
      /**
       * The time the *CustomFieldValue* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *CustomFieldValue* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The type of the *CustomFieldValue*
       */
      field_type?:
        | "checkbox"
        | "contact"
        | "currency"
        | "date"
        | "time"
        | "email"
        | "matter"
        | "numeric"
        | "picklist"
        | "text_area"
        | "text_line"
        | "url";
      /**
       * Whether the *CustomFieldValue* requires a value
       */
      field_required?: boolean;
      /**
       * Whether the *CustomFieldValue* is displayed by default
       */
      field_displayed?: boolean;
      /**
       * The display position of the *CustomFieldValue*
       */
      field_display_order?: number;
      /**
       * The value of the *CustomFieldValue*
       */
      value?: string;
      /**
       * Whether the value is associated with a deleted custom field
       */
      soft_deleted?: boolean;
    };
    CustomFieldValue: components["schemas"]["CustomFieldValue_base"] & {
      custom_field?: components["schemas"]["CustomField"];
      picklist_option?: components["schemas"]["PicklistOption"];
      matter?: components["schemas"]["CustomFieldMatterSelection_base"];
      contact?: components["schemas"]["Contact_base"];
    };
    CustomFieldValue_Events: {
      record?: components["schemas"]["CustomFieldValue"];
      events?: components["schemas"]["EventDetail"][];
    };
    CustomFieldConversionError_base: {
      /**
       * Unique identifier for the *CustomFieldConversionError*
       */
      id?: number;
      /**
       * ETag for the *CustomFieldConversionError*
       */
      etag?: string;
      /**
       * Created date
       */
      created_at?: string;
      /**
       * The time the *CustomFieldConversionError* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * Type of object the *CustomFieldConversionError* is for.
       */
      parent_type?: "Matter" | "Contact";
      /**
       * The original field value
       */
      original_value?: string;
      /**
       * The custom field value
       */
      destination_value?: string;
      /**
       * The description of the *CustomFieldConversionError*
       */
      description?: string;
    };
    CustomFieldConversionError: components["schemas"]["CustomFieldConversionError_base"] & {
      custom_field_conversion?: components["schemas"]["CustomFieldConversion_base"];
      parent?: components["schemas"]["PolymorphicObject_base"];
    };
    CustomFieldConversionError_Events: {
      record?: components["schemas"]["CustomFieldConversionError"];
      events?: components["schemas"]["EventDetail"][];
    };
    ContactWithShareMethod_base: {
      /**
       * Unique identifier for the *ContactWithShareMethod*
       */
      id?: number;
      /**
       * ETag for the *ContactWithShareMethod*
       */
      etag?: string;
      /**
       * The name of the *ContactWithShareMethod*
       */
      name?: string;
      /**
       * The type of the *ContactWithShareMethod*
       */
      type?: "Company" | "Person";
      /**
       * The primary email address associated with this *ContactWithShareMethod*.
       */
      primary_email_address?: string;
      /**
       * The method by which the resource is being shared with this *ContactWithShareMethod*.
       */
      share_method?: string[];
    };
    ContactWithShareMethod: components["schemas"]["ContactWithShareMethod_base"] & {
      [key: string]: any;
    };
    ContactWithShareMethod_Events: {
      record?: components["schemas"]["ContactWithShareMethod"];
      events?: components["schemas"]["EventDetail"][];
    };
    ExpenseCategory_base: {
      /**
       * Unique identifier for the *ExpenseCategory*
       */
      id?: number;
      /**
       * ETag for the *ExpenseCategory*
       */
      etag?: string;
      /**
       * The name of the expense category
       */
      name?: string;
      /**
       * The price charged per unit cost
       */
      rate?: number;
      /**
       * The type of expense entry the category is associated to. Can be either "hard_cost", "soft_cost" or "unassociated"
       */
      entry_type?: string;
      /**
       * The time the *ExpenseCategory* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *ExpenseCategory* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * Custom Xero expense code for an expense category
       */
      xero_expense_code?: string;
      /**
       * Determines if expense category is accessible to user
       */
      accessible_to_user?: boolean;
    };
    ExpenseCategory: components["schemas"]["ExpenseCategory_base"] & {
      /**
       * Group
       */
      groups?: components["schemas"]["Group_base"][];
      utbms_code?: components["schemas"]["UtbmsCode_base"];
    };
    ExpenseCategory_Events: {
      record?: components["schemas"]["ExpenseCategory"];
      events?: components["schemas"]["EventDetail"][];
    };
    ExpenseCategoryShow: { data: components["schemas"]["ExpenseCategory"] };
    ExpenseCategoryList: {
      /**
       * ExpenseCategory List Response
       */
      data: components["schemas"]["ExpenseCategory"][];
    };
    ExpenseCategoryListEvent: {
      /**
       * ExpenseCategory Event List Response
       */
      data: components["schemas"]["ExpenseCategory_Events"][];
    };
    TrustLineItem_base: {
      /**
       * Unique identifier for the *TrustLineItem*
       */
      id?: number;
      /**
       * ETag for the *TrustLineItem*
       */
      etag?: string;
      /**
       * The date of the *TrustLineItem* (as a ISO-8601 date)
       */
      date?: string;
      /**
       * The total amount for the *TrustLineItem*
       */
      total?: number;
      /**
       * Note for the *TrustLineItem*
       */
      note?: string;
      /**
       * The time the *TrustLineItem* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *TrustLineItem* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    TrustLineItem: components["schemas"]["TrustLineItem_base"] & {
      bill?: components["schemas"]["Bill_base"];
      matter?: components["schemas"]["Matter_base"];
      client?: components["schemas"]["Contact_base"];
    };
    TrustLineItem_Events: {
      record?: components["schemas"]["TrustLineItem"];
      events?: components["schemas"]["EventDetail"][];
    };
    TrustLineItemShow: { data: components["schemas"]["TrustLineItem"] };
    TrustLineItemList: {
      /**
       * TrustLineItem List Response
       */
      data: components["schemas"]["TrustLineItem"][];
    };
    TrustLineItemListEvent: {
      /**
       * TrustLineItem Event List Response
       */
      data: components["schemas"]["TrustLineItem_Events"][];
    };
    Reminder_base: {
      /**
       * Unique identifier for the *Reminder*
       */
      id?: number;
      /**
       * ETag for the *Reminder*
       */
      etag?: string;
      /**
       * Time in minutes to remind user before the subject
       */
      duration?: number;
      /**
       * The time the *Reminder* will be delivered (as a ISO-8601 timestamp)
       */
      next_delivery_at?: string;
      /**
       * The current state of the *Reminder*
       */
      state?:
        | "initializing"
        | "scheduling"
        | "rescheduling"
        | "scheduled"
        | "attempting_delivery"
        | "delivery_failed"
        | "delivered"
        | "delivery_skipped"
        | "invalid_user";
      /**
       * The time the *Reminder* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Reminder* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    Reminder: components["schemas"]["Reminder_base"] & {
      notification_method?: components["schemas"]["NotificationMethod_base"];
      subject?: components["schemas"]["PolymorphicObject_base"];
    };
    Reminder_Events: {
      record?: components["schemas"]["Reminder"];
      events?: components["schemas"]["EventDetail"][];
    };
    ReminderShow: { data: components["schemas"]["Reminder"] };
    ReminderList: {
      /**
       * Reminder List Response
       */
      data: components["schemas"]["Reminder"][];
    };
    ReminderListEvent: {
      /**
       * Reminder Event List Response
       */
      data: components["schemas"]["Reminder_Events"][];
    };
    MatterTransfer_base: {
      /**
       * Unique identifier for the *MatterTransfer*
       */
      id?: number;
      /**
       * ETag for the *MatterTransfer*
       */
      etag?: string;
      /**
       * Transfer of funds between two matters.
       */
      description?: string;
      /**
       * The amount of balance to be transferred between matters.
       */
      amount?: number;
      /**
       * The type of the *MatterTransfer*
       */
      type?: string;
      /**
       * The date the *MatterTransfer* is for (as a ISO-8601 date)
       */
      date?: string;
    };
    MatterTransfer: components["schemas"]["MatterTransfer_base"] & {
      source_matter?: components["schemas"]["Matter_base"];
      destination_matter?: components["schemas"]["Matter_base"];
      client?: components["schemas"]["Contact_base"];
      bank_account?: components["schemas"]["BankAccount_base"];
    };
    MatterTransfer_Events: {
      record?: components["schemas"]["MatterTransfer"];
      events?: components["schemas"]["EventDetail"][];
    };
    LineItemTotals_base: {
      /**
       * Sum of quantity for included line items.
       */
      quantity?: number;
      /**
       * Sum of price for included line items.
       */
      price?: number;
      /**
       * Sum of discount as percentage for included line items.
       */
      discount_percent?: number;
      /**
       * Sum of total for included line items.
       */
      total?: number;
      /**
       * Sum of total before discount and tax is applied.
       */
      sub_total?: number;
    };
    LineItemTotals: components["schemas"]["LineItemTotals_base"] & {
      [key: string]: any;
    };
    LineItemTotals_Events: {
      record?: components["schemas"]["LineItemTotals"];
      events?: components["schemas"]["EventDetail"][];
    };
    CalendarEntry_base: {
      /**
       * Unique identifier for the *CalendarEntry*
       */
      id?: string;
      /**
       * ETag for the *CalendarEntry*
       */
      etag?: string;
      /**
       * A short summary of the *CalendarEntry*
       */
      summary?: string;
      /**
       * A detailed description of the *CalendarEntry*
       */
      description?: string;
      /**
       * The geographic location of the *CalendarEntry*
       */
      location?: string;
      /**
       * The time the *CalendarEntry* starts (as an ISO-8601 timestamp)
       */
      start_at?: string;
      /**
       * The time the *CalendarEntry* ends (as an ISO-8601 timestamp)
       */
      end_at?: string;
      /**
       * Whether the event is all day
       */
      all_day?: boolean;
      /**
       * Recurrence rule for expanding
       */
      recurrence_rule?: string;
      /**
       * Identifier for the parent *CalendarEntry*
       */
      parent_calendar_entry_id?: number;
      /**
       * Whether this event is associated with a Court Rule
       */
      court_rule?: boolean;
      /**
       * The time the *CalendarEntry* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *CalendarEntry* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The view permission for the current user, will return 'viewer' when permission is 'limited_viewer' and the user is an attendee.
       */
      permission?: string;
      /**
       * The number of `TimeEntry` activities associated with the *CalendarEntry*
       */
      time_entries_count?: number;
      /**
       * The id of the calendar owner.
       */
      calendar_owner_id?: number;
      /**
       * Original start at time zone of the event.
       */
      start_at_time_zone?: string;
    };
    CalendarEntry: components["schemas"]["CalendarEntry_base"] & {
      conference_meeting?: components["schemas"]["ConferenceMeeting_base"];
      matter?: components["schemas"]["Matter_base"];
      matter_docket?: components["schemas"]["MatterDocket_base"];
      calendar_owner?: components["schemas"]["Calendar_base"];
      parent_calendar_entry?: components["schemas"]["CalendarEntry_base"];
      /**
       * Attendee
       */
      attendees?: components["schemas"]["Attendee_base"][];
      /**
       * Calendar
       */
      calendars?: components["schemas"]["Calendar_base"][];
      /**
       * Reminder
       */
      reminders?: components["schemas"]["Reminder_base"][];
      /**
       * ExternalProperty
       */
      external_properties?: components["schemas"]["ExternalProperty_base"][];
      /**
       * Activity
       */
      time_entries?: components["schemas"]["Activity_base"][];
    };
    CalendarEntry_Events: {
      record?: components["schemas"]["CalendarEntry"];
      events?: components["schemas"]["EventDetail"][];
    };
    CalendarEntryShow: { data: components["schemas"]["CalendarEntry"] };
    CalendarEntryList: {
      /**
       * CalendarEntry List Response
       */
      data: components["schemas"]["CalendarEntry"][];
    };
    CalendarEntryListEvent: {
      /**
       * CalendarEntry Event List Response
       */
      data: components["schemas"]["CalendarEntry_Events"][];
    };
    ClioPaymentsMerchantAccount_base: {
      /**
       * Unique identifier for the *ClioPaymentsMerchantAccount*
       */
      id?: string;
      /**
       * The name of the merchant account.
       */
      name?: string;
      /**
       * The status of the merchant account (e.g. ACTIVE).
       */
      status?: string;
      /**
       * Whether or not the merchant account is a client funds account.
       */
      trust_account?: boolean;
      /**
       * The ID of the internal payments gateway.
       */
      external_id?: number;
    };
    ClioPaymentsMerchantAccount: components["schemas"]["ClioPaymentsMerchantAccount_base"] & {
      [key: string]: any;
    };
    ClioPaymentsMerchantAccount_Events: {
      record?: components["schemas"]["ClioPaymentsMerchantAccount"];
      events?: components["schemas"]["EventDetail"][];
    };
    Account_base: {
      /**
       * Unique identifier for the *Account*
       */
      id?: number;
      /**
       * ETag for the *Account*
       */
      etag?: string;
      /**
       * The name of the *Account*
       */
      name?: string;
      /**
       * Account state
       */
      state?: string;
    };
    Account: components["schemas"]["Account_base"] & {
      owner?: components["schemas"]["User_base"];
    };
    Account_Events: {
      record?: components["schemas"]["Account"];
      events?: components["schemas"]["EventDetail"][];
    };
    PicklistOption_base: {
      /**
       * Unique identifier for the *PicklistOption*
       */
      id?: number;
      /**
       * The value of the *PicklistOption*
       */
      option?: string;
      /**
       * The time the *PicklistOption* was deleted (as a ISO-8601 timestamp)
       */
      deleted_at?: string;
    };
    PicklistOption: components["schemas"]["PicklistOption_base"] & {
      [key: string]: any;
    };
    PicklistOption_Events: {
      record?: components["schemas"]["PicklistOption"];
      events?: components["schemas"]["EventDetail"][];
    };
    CustomFieldSet_base: {
      /**
       * Unique identifier for the *CustomFieldSet*
       */
      id?: number;
      /**
       * ETag for the *CustomFieldSet*
       */
      etag?: string;
      /**
       * The name of the custom field set.
       */
      name?: string;
      /**
       * Type of object the *CustomFieldSet* is for.
       */
      parent_type?: "Contact" | "Matter";
      /**
       * Whether or not the *CustomFieldSet* should be displayed by default.
       */
      displayed?: boolean;
      /**
       * The time the *CustomFieldSet* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *CustomFieldSet* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    CustomFieldSet: components["schemas"]["CustomFieldSet_base"] & {
      /**
       * CustomField
       */
      custom_fields?: components["schemas"]["CustomField_base"][];
    };
    CustomFieldSet_Events: {
      record?: components["schemas"]["CustomFieldSet"];
      events?: components["schemas"]["EventDetail"][];
    };
    CustomFieldSetList: {
      /**
       * CustomFieldSet List Response
       */
      data: components["schemas"]["CustomFieldSet"][];
    };
    CustomFieldSetListEvent: {
      /**
       * CustomFieldSet Event List Response
       */
      data: components["schemas"]["CustomFieldSet_Events"][];
    };
    Invitation_base: { [key: string]: any };
    Invitation: components["schemas"]["Invitation_base"] & {
      [key: string]: any;
    };
    Invitation_Events: {
      record?: components["schemas"]["Invitation"];
      events?: components["schemas"]["EventDetail"][];
    };
    CustomFieldMatterSelection_base: {
      /**
       * Unique identifier for the *CustomFieldMatterSelection*
       */
      id?: number;
      /**
       * The reference and label of the *CustomFieldMatterSelection*. Depending on the account's manual_matter_numbering setting, this is either read only (generated) or customizable.
       */
      display_number?: string;
    };
    CustomFieldMatterSelection: components["schemas"]["CustomFieldMatterSelection_base"] & {
      [key: string]: any;
    };
    CustomFieldMatterSelection_Events: {
      record?: components["schemas"]["CustomFieldMatterSelection"];
      events?: components["schemas"]["EventDetail"][];
    };
    Participant_base: {
      /**
       * Unique identifier for the *Participant*
       */
      id?: number;
      /**
       * The type of the *Participant*
       */
      type?: "Contact" | "User";
      /**
       * A string to identify the *Participant*
       */
      identifier?: string;
      /**
       * A secondary string to identify the *Participant*
       */
      secondary_identifier?: string;
      /**
       * The enabled state of the *Participant* record. Always 'null' if *Participant* type is Contact
       */
      enabled?: boolean;
      /**
       * The name of the *Participant* record
       */
      name?: string;
    };
    Participant: components["schemas"]["Participant_base"] & {
      [key: string]: any;
    };
    Participant_Events: {
      record?: components["schemas"]["Participant"];
      events?: components["schemas"]["EventDetail"][];
    };
    MatterCustomRate_base: {
      /**
       * The type of the *MatterCustomRate*
       */
      type?: "FlatRate" | "HourlyRate" | "ContingencyFee";
      /**
       * Specifies if the matter's associated activity is posted or on a bill.
       */
      on_invoice?: boolean;
    };
    MatterCustomRate: components["schemas"]["MatterCustomRate_base"] & {
      /**
       * PolymorphicCustomRate
       */
      rates?: components["schemas"]["PolymorphicCustomRate"][];
    };
    MatterCustomRate_Events: {
      record?: components["schemas"]["MatterCustomRate"];
      events?: components["schemas"]["EventDetail"][];
    };
    PhoneNumber_base: {
      /**
       * Unique identifier for the *PhoneNumber*
       */
      id?: number;
      /**
       * ETag for the *PhoneNumber*
       */
      etag?: string;
      /**
       * Contact's Phone Number
       */
      number?: string;
      /**
       * The type of *PhoneNumber* it is
       */
      name?: "Work" | "Personal" | "Other";
      /**
       * Whether it is default for this contact
       */
      primary?: boolean;
      /**
       * The time the *PhoneNumber* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *PhoneNumber* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    PhoneNumber: components["schemas"]["PhoneNumber_base"] & {
      [key: string]: any;
    };
    PhoneNumber_Events: {
      record?: components["schemas"]["PhoneNumber"];
      events?: components["schemas"]["EventDetail"][];
    };
    InstantMessenger_base: {
      /**
       * Unique identifier for the *InstantMessenger*
       */
      id?: number;
      /**
       * ETag for the *InstantMessenger*
       */
      etag?: string;
      /**
       * The address of the *InstantMessenger*
       */
      address?: string;
      /**
       * The type of *InstantMessenger* it is
       */
      name?: "Work" | "Personal" | "Other";
      /**
       * The time the *InstantMessenger* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *InstantMessenger* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    InstantMessenger: components["schemas"]["InstantMessenger_base"] & {
      [key: string]: any;
    };
    InstantMessenger_Events: {
      record?: components["schemas"]["InstantMessenger"];
      events?: components["schemas"]["EventDetail"][];
    };
    RequiredPaymentAction_base: { [key: string]: any };
    RequiredPaymentAction: components["schemas"]["RequiredPaymentAction_base"] & {
      [key: string]: any;
    };
    RequiredPaymentAction_Events: {
      record?: components["schemas"]["RequiredPaymentAction"];
      events?: components["schemas"]["EventDetail"][];
    };
    CustomPaymentLinkConfiguration_base: {
      /**
       * Unique identifier for the *CustomPaymentLinkConfiguration*
       */
      id?: number;
      /**
       * Link to Single Payment Page which allows to transfer funds without logging in.
       */
      clio_payment_link?: string;
    };
    CustomPaymentLinkConfiguration: components["schemas"]["CustomPaymentLinkConfiguration_base"] & {
      clio_payments_payment?: components["schemas"]["ClioPayments_base"];
    };
    CustomPaymentLinkConfiguration_Events: {
      record?: components["schemas"]["CustomPaymentLinkConfiguration"];
      events?: components["schemas"]["EventDetail"][];
    };
    XeroAccountCode_base: { [key: string]: any };
    XeroAccountCode: components["schemas"]["XeroAccountCode_base"] & {
      [key: string]: any;
    };
    XeroAccountCode_Events: {
      record?: components["schemas"]["XeroAccountCode"];
      events?: components["schemas"]["EventDetail"][];
    };
    CustomField_base: {
      /**
       * Unique identifier for the *CustomField*
       */
      id?: number;
      /**
       * ETag for the *CustomField*
       */
      etag?: string;
      /**
       * The time the *CustomField* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *CustomField* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The name of the *CustomField*
       */
      name?: string;
      /**
       * Type of object the *CustomField* is for
       */
      parent_type?: "Contact" | "Matter";
      /**
       * Field type of the *CustomField*
       */
      field_type?:
        | "checkbox"
        | "contact"
        | "currency"
        | "date"
        | "time"
        | "email"
        | "matter"
        | "numeric"
        | "picklist"
        | "text_area"
        | "text_line"
        | "url";
      /**
       * Whether the *CustomField* is displayed by default
       */
      displayed?: boolean;
      /**
       * Whether the *CustomField* is deleted for future use
       */
      deleted?: boolean;
      /**
       * Whether the *CustomField* requires a value
       */
      required?: boolean;
      /**
       * The display position of the *CustomField*
       */
      display_order?: string;
    };
    CustomField: components["schemas"]["CustomField_base"] & {
      /**
       * PicklistOption
       */
      picklist_options?: components["schemas"]["PicklistOption_base"][];
    };
    CustomField_Events: {
      record?: components["schemas"]["CustomField"];
      events?: components["schemas"]["EventDetail"][];
    };
    CustomFieldShow: { data: components["schemas"]["CustomField"] };
    CustomFieldList: {
      /**
       * CustomField List Response
       */
      data: components["schemas"]["CustomField"][];
    };
    CustomFieldListEvent: {
      /**
       * CustomField Event List Response
       */
      data: components["schemas"]["CustomField_Events"][];
    };
    CustomFieldSetAssociation_base: {
      /**
       * Unique identifier for the *CustomFieldSetAssociation*
       */
      id?: number;
      /**
       * ETag for the *CustomFieldSetAssociation*
       */
      etag?: string;
      /**
       * The display position of the *CustomFieldSetAssociation*
       */
      display_order?: number;
      /**
       * The time the *CustomFieldSetAssociation* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *CustomFieldSetAssociation* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    CustomFieldSetAssociation: components["schemas"]["CustomFieldSetAssociation_base"] & {
      custom_field_set?: components["schemas"]["CustomFieldSet_base"];
      parent?: components["schemas"]["PolymorphicObject_base"];
    };
    CustomFieldSetAssociation_Events: {
      record?: components["schemas"]["CustomFieldSetAssociation"];
      events?: components["schemas"]["EventDetail"][];
    };
    PaymentTransaction_base: {
      /**
       * Unique identifier for the *PaymentTransaction*
       */
      id?: number;
      /**
       * ETag for the *PaymentTransaction*
       */
      etag?: string;
      /**
       * Status of the payment transaction (`pending`, `completed`, or `failed`)
       */
      status?: string;
      /**
       * Errors that occurred while completing the payment transaction
       */
      payment_errors?: string;
      /**
       * The time the *PaymentTransaction* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *PaymentTransaction* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    PaymentTransaction: components["schemas"]["PaymentTransaction_base"] & {
      creator?: components["schemas"]["User_base"];
      clio_payments_payment?: components["schemas"]["ClioPayments_base"];
      /**
       * Payment
       */
      payments?: components["schemas"]["Payment_base"][];
    };
    PaymentTransaction_Events: {
      record?: components["schemas"]["PaymentTransaction"];
      events?: components["schemas"]["EventDetail"][];
    };
    TaskTemplate_base: {
      /**
       * Unique identifier for the *TaskTemplate*
       */
      id?: number;
      /**
       * ETag for the *TaskTemplate*
       */
      etag?: string;
      /**
       * The name of the *TaskTemplate*
       */
      name?: string;
      /**
       * A detailed description of the *TaskTemplate*
       */
      description?: string;
      /**
       * *TaskTemplate* priority
       */
      priority?: "High" | "Normal" | "Low";
      /**
       * Whether the *TaskTemplate* is private.
       */
      private?: boolean;
      /**
       * The time the *TaskTemplate* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *TaskTemplate* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    TaskTemplate: components["schemas"]["TaskTemplate_base"] & {
      task_template_list?: components["schemas"]["TaskTemplateList_base"];
      template_creator?: components["schemas"]["User_base"];
      /**
       * ReminderTemplate
       */
      reminder_templates?: components["schemas"]["ReminderTemplate_base"][];
    };
    TaskTemplate_Events: {
      record?: components["schemas"]["TaskTemplate"];
      events?: components["schemas"]["EventDetail"][];
    };
    TaskTemplateShow: { data: components["schemas"]["TaskTemplate"] };
    TaskTemplateListEvent: {
      /**
       * TaskTemplate Event List Response
       */
      data: components["schemas"]["TaskTemplate_Events"][];
    };
    ClioPaymentsCard_base: {
      /**
       * Unique identifier for the *ClioPaymentsCard*
       */
      id?: number;
      /**
       * The unique identifier for the user of the *ClioPaymentsCard*.
       */
      user_id?: number;
      /**
       * The unique identifier for the contact of the *ClioPaymentsCard*.
       */
      contact_id?: number;
      /**
       * The last four digits of the *ClioPaymentsCard*.
       */
      number?: string;
      /**
       * The two digit expiry month of the *ClioPaymentsCard*.
       */
      expiry_month?: string;
      /**
       * The four digit expiry year of the *ClioPaymentsCard*.
       */
      expiry_year?: string;
      /**
       * The time the *ClioPaymentsCard* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *ClioPaymentsCard* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The type of the *ClioPaymentsCard*.
       */
      card_type?: "0" | "1" | "2" | "3" | "4" | "5" | "6";
      /**
       * Identifier for the Clio account associated with the ClioPaymentsCard.
       */
      account_id?: number;
    };
    ClioPaymentsCard: components["schemas"]["ClioPaymentsCard_base"] & {
      [key: string]: any;
    };
    ClioPaymentsCard_Events: {
      record?: components["schemas"]["ClioPaymentsCard"];
      events?: components["schemas"]["EventDetail"][];
    };
    EmailAddress_base: {
      /**
       * Unique identifier for the *EmailAddress*
       */
      id?: number;
      /**
       * ETag for the *EmailAddress*
       */
      etag?: string;
      /**
       * The address of the *EmailAddress*
       */
      address?: string;
      /**
       * The type of *EmailAddress* it is
       */
      name?: "Work" | "Home" | "Other";
      /**
       * Whether it is the default for this contact
       */
      primary?: boolean;
      /**
       * The time the *EmailAddress* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *EmailAddress* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    EmailAddress: components["schemas"]["EmailAddress_base"] & {
      [key: string]: any;
    };
    EmailAddress_Events: {
      record?: components["schemas"]["EmailAddress"];
      events?: components["schemas"]["EventDetail"][];
    };
    Timer_base: {
      /**
       * Unique identifier for the *Timer*
       */
      id?: number;
      /**
       * ETag for the *Timer*
       */
      etag?: string;
      /**
       * The time the *Timer* was started (as ISO-8601 timestamp)
       */
      start_time?: string;
      /**
       * How much time has elapsed, in hours, since the timer was started
       */
      elapsed_time?: number;
      /**
       * The time the *Timer* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Timer* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    Timer: components["schemas"]["Timer_base"] & {
      activity?: components["schemas"]["Activity_base"];
    };
    Timer_Events: {
      record?: components["schemas"]["Timer"];
      events?: components["schemas"]["EventDetail"][];
    };
    TimerShow: { data: components["schemas"]["Timer"] };
    LineItem_base: {
      /**
       * Unique identifier for the *LineItem*
       */
      id?: number;
      /**
       * ETag for the *LineItem*
       */
      etag?: string;
      /**
       * The type of the *LineItem*
       */
      type?: "ActivityLineItem" | "LineItem" | "SummaryLineItem";
      /**
       * The description for the *LineItem*
       */
      description?: string;
      /**
       * The *LineItem* date (as a ISO-8601 date)
       */
      date?: string;
      /**
       * The price of the *LineItem*
       */
      price?: number;
      /**
       * Whether the *LineItem* is taxable
       */
      taxable?: boolean;
      /**
       * The kind of *LineItem*
       */
      kind?: "Service" | "Expense";
      /**
       * The note attached to the *LineItem*
       */
      note?: string;
      /**
       * Whether the *LineItem* is secondary taxable
       */
      secondary_taxable?: boolean;
      /**
       * The total amount for the *LineItem*
       */
      total?: number;
      /**
       * The tax amount for the *LineItem*
       */
      tax?: number;
      /**
       * The secondary tax amount for the *LineItem*
       */
      secondary_tax?: number;
      /**
       * The subtotal amount for the *LineItem*
       */
      sub_total?: number;
      /**
       * The amount of hours for the *LineItem*
       */
      quantity?: number;
      /**
       * The value to specify the ordering of the *LineItem* on a bill
       */
      group_ordering?: number;
      /**
       * The time the *LineItem* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *LineItem* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    LineItem: components["schemas"]["LineItem_base"] & {
      bill?: components["schemas"]["Bill_base"];
      activity?: components["schemas"]["Activity_base"];
      matter?: components["schemas"]["Matter_base"];
      user?: components["schemas"]["User_base"];
      discount?: components["schemas"]["Discount_base"];
      included_line_item_totals?: components["schemas"]["LineItemTotals_base"];
    };
    LineItem_Events: {
      record?: components["schemas"]["LineItem"];
      events?: components["schemas"]["EventDetail"][];
    };
    LineItemShow: { data: components["schemas"]["LineItem"] };
    LineItemList: {
      /**
       * LineItem List Response
       */
      data: components["schemas"]["LineItem"][];
    };
    LineItemListEvent: {
      /**
       * LineItem Event List Response
       */
      data: components["schemas"]["LineItem_Events"][];
    };
    PolymorphicObject_base: {
      /**
       * Unique identifier for the *PolymorphicObject*
       */
      id?: number;
      /**
       * The type of the *PolymorphicObject*
       */
      type?:
        | "Task"
        | "CalendarEntry"
        | "MatterNote"
        | "ContactNote"
        | "Matter"
        | "Contact"
        | "User"
        | "CreditMemo"
        | "Payment";
      /**
       * A string to identify the *PolymorphicObject*
       */
      identifier?: string;
      /**
       * A secondary string to identify the *PolymorphicObject*
       */
      secondary_identifier?: string;
    };
    PolymorphicObject: components["schemas"]["PolymorphicObject_base"] & {
      [key: string]: any;
    };
    PolymorphicObject_Events: {
      record?: components["schemas"]["PolymorphicObject"];
      events?: components["schemas"]["EventDetail"][];
    };
    LicenseAllocation_base: {
      /**
       * Unique identifier for the *LicenseAllocation*
       */
      id?: number;
      /**
       * The time the *LicenseAllocation* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *LicenseAllocation* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * If user is enabled without a valid license
       */
      overallocated?: boolean;
    };
    LicenseAllocation: components["schemas"]["LicenseAllocation_base"] & {
      user?: components["schemas"]["User_base"];
    };
    LicenseAllocation_Events: {
      record?: components["schemas"]["LicenseAllocation"];
      events?: components["schemas"]["EventDetail"][];
    };
    ConferenceMeeting_base: {
      /**
       * Third-party provider unique meeting ID
       */
      conference_id?: number;
      /**
       * Third-party provider meeting password
       */
      conference_password?: string;
      /**
       * The time the *ConferenceMeeting* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * ETag for the *ConferenceMeeting*
       */
      etag?: string;
      /**
       * Unique identifier for the *ConferenceMeeting*
       */
      id?: number;
      /**
       * URL for participants to join the video conference
       */
      join_url?: string;
      /**
       * The type of video conference
       */
      type?: string;
      /**
       * The external ID of the video conference meeting
       */
      source_id?: number;
      /**
       * The time the *ConferenceMeeting* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    ConferenceMeeting: components["schemas"]["ConferenceMeeting_base"] & {
      [key: string]: any;
    };
    ConferenceMeeting_Events: {
      record?: components["schemas"]["ConferenceMeeting"];
      events?: components["schemas"]["EventDetail"][];
    };
    Webhook_base: {
      /**
       * Unique identifier for the *Webhook*
       */
      id?: number;
      /**
       * ETag for the *Webhook*
       */
      etag?: string;
      /**
       * The `https` URL to send the data to when the events are triggered
       */
      url?: string;
      /**
       * Fields to be included in the webhook request
       */
      fields?: string;
      /**
       * A shared secret used to create a signature for the payload
       */
      shared_secret?: string;
      /**
       * What kind of records the webhook is for
       */
      model?:
        | "activity"
        | "bill"
        | "calendar_entry"
        | "communication"
        | "contact"
        | "matter"
        | "task";
      /**
       * The current status of the webhook.
       */
      status?: "pending" | "enabled" | "suspended";
      /**
       * The events your webhook is subscribed to.
       */
      events?:
        | "created"
        | "updated"
        | "deleted"
        | "matter_opened"
        | "matter_pended"
        | "matter_closed";
      /**
       * The time webhook will expire (as a ISO-8601 timestamp)
       */
      expires_at?: string;
      /**
       * The time the *Webhook* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Webhook* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    Webhook: components["schemas"]["Webhook_base"] & {
      user?: components["schemas"]["User_base"];
    };
    Webhook_Events: {
      record?: components["schemas"]["Webhook"];
      events?: components["schemas"]["EventDetail"][];
    };
    WebhookShow: { data: components["schemas"]["Webhook"] };
    WebhookList: {
      /**
       * Webhook List Response
       */
      data: components["schemas"]["Webhook"][];
    };
    WebhookListEvent: {
      /**
       * Webhook Event List Response
       */
      data: components["schemas"]["Webhook_Events"][];
    };
    Multipart_base: {
      /**
       * Unique identifier of a part which defines its position within the document being uploaded.
       */
      part_number?: number;
      /**
       * A signed URL for uploading the file part. It expires in 10 minutes.
       */
      put_url?: string;
    };
    Multipart: components["schemas"]["Multipart_base"] & {
      /**
       * MultipartHeader
       */
      put_headers?: components["schemas"]["MultipartHeader_base"][];
    };
    Multipart_Events: {
      record?: components["schemas"]["Multipart"];
      events?: components["schemas"]["EventDetail"][];
    };
    MultipartHeader_base: {
      /**
       * Required HTTP header field name for uploading.
       */
      name?: string;
      /**
       * Required HTTP header field value for uploading.
       */
      value?: string;
    };
    MultipartHeader: components["schemas"]["MultipartHeader_base"] & {
      [key: string]: any;
    };
    MultipartHeader_Events: {
      record?: components["schemas"]["MultipartHeader"];
      events?: components["schemas"]["EventDetail"][];
    };
    DocumentTemplate_base: {
      /**
       * Unique identifier for the *DocumentTemplate*
       */
      id?: number;
      /**
       * ETag for the *DocumentTemplate*
       */
      etag?: string;
      /**
       * The size in bytes of the template
       */
      size?: number;
      /**
       * A standard MIME type describing the format of the object data.
       */
      content_type?: string;
      /**
       * The name of the original file that was uploaded
       */
      filename?: string;
      /**
       * The time the *DocumentTemplate* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *DocumentTemplate* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    DocumentTemplate: components["schemas"]["DocumentTemplate_base"] & {
      document_category?: components["schemas"]["DocumentCategory_base"];
      last_modified_by?: components["schemas"]["User_base"];
    };
    DocumentTemplate_Events: {
      record?: components["schemas"]["DocumentTemplate"];
      events?: components["schemas"]["EventDetail"][];
    };
    DocumentTemplateShow: { data: components["schemas"]["DocumentTemplate"] };
    DocumentTemplateList: {
      /**
       * DocumentTemplate List Response
       */
      data: components["schemas"]["DocumentTemplate"][];
    };
    DocumentTemplateListEvent: {
      /**
       * DocumentTemplate Event List Response
       */
      data: components["schemas"]["DocumentTemplate_Events"][];
    };
    Activity_base: {
      /**
       * Unique identifier for the *Activity*
       */
      id?: number;
      /**
       * ETag for the *Activity*
       */
      etag?: string;
      /**
       * The type of the *Activity*
       */
      type?: "TimeEntry" | "ExpenseEntry" | "HardCostEntry" | "SoftCostEntry";
      /**
       * The date the *Activity* was performed (as a ISO-8601 date)
       */
      date?: string;
      /**
       * The number of hours the TimeEntry took.
       */
      quantity_in_hours?: number;
      /**
       * The number of hours rounded accordingly to the billing settings.
       * The rounded value is used to calculate the total.
       */
      rounded_quantity_in_hours?: number;
      /**
       * The field is applicable to TimeEntry, ExpenseEntry, and SoftCostEntry.
       *
       * **Version <= 4.0.3:**
       * The number of hours the TimeEntry took.
       *
       * **Latest version:**
       * The number of seconds the TimeEntry took.
       */
      quantity?: number;
      /**
       * The field is applicable to time entries only.
       *
       * **Version <= 4.0.3:**
       * The number of hours rounded accordingly to the billing settings.
       * The rounded value is used to calculate the total.
       *
       * **Latest version:**
       * The number of seconds rounded accordingly to the billing settings.
       * The rounded value is used to calculate the total.
       */
      rounded_quantity?: number;
      /**
       * The hourly or fixed rate of the *Activity*
       */
      price?: number;
      /**
       * The details about the *Activity*
       */
      note?: string;
      /**
       * Whether the *Activity* is a flat rate
       */
      flat_rate?: boolean;
      /**
       * Whether the *Activity* has been added to an active bill that is in the state of `awaiting_payment` or `paid`
       */
      billed?: boolean;
      /**
       * Whether the *Activity* has been added to an active bill that is in the state of `draft`, `awaiting_approval`, `awaiting_payment` or `paid`
       */
      on_bill?: boolean;
      /**
       * The total cost of draft, billable and billed items in the *Activity*
       */
      total?: number;
      /**
       * Whether or not the *Activity* is a contingency fee
       */
      contingency_fee?: boolean;
      /**
       * The time the *Activity* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Activity* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * A check reference for a HardCostEntry.
       */
      reference?: string;
      /**
       * Whether the *Activity* is non-billable
       */
      non_billable?: boolean;
      /**
       * The total cost of non-billable items in the *Activity*
       */
      non_billable_total?: number;
    };
    Activity: components["schemas"]["Activity_base"] & {
      activity_description?: components["schemas"]["ActivityDescription_base"];
      expense_category?: components["schemas"]["ExpenseCategory_base"];
      bill?: components["schemas"]["Bill_base"];
      communication?: components["schemas"]["Communication_base"];
      matter?: components["schemas"]["Matter_base"];
      matter_note?: components["schemas"]["Note_base"];
      contact_note?: components["schemas"]["Note_base"];
      subject?: components["schemas"]["PolymorphicObject_base"];
      timer?: components["schemas"]["Timer_base"];
      user?: components["schemas"]["User_base"];
      utbms_expense?: components["schemas"]["UtbmsCode_base"];
      vendor?: components["schemas"]["Contact_base"];
      calendar_entry?: components["schemas"]["Activity_CalendarEntry_base"];
      task?: components["schemas"]["Activity_Task_base"];
      document_version?: components["schemas"]["DocumentVersion_base"];
    };
    Activity_Events: {
      record?: components["schemas"]["Activity"];
      events?: components["schemas"]["EventDetail"][];
    };
    ActivityShow: { data: components["schemas"]["Activity"] };
    ActivityList: {
      /**
       * Activity List Response
       */
      data: components["schemas"]["Activity"][];
    };
    ActivityListEvent: {
      /**
       * Activity Event List Response
       */
      data: components["schemas"]["Activity_Events"][];
    };
    Activity_CalendarEntry_base: {
      /**
       * Unique identifier for the *CalendarEntry*
       */
      id?: string;
      /**
       * ETag for the *CalendarEntry*
       */
      etag?: string;
      /**
       * The id of the calendar owner.
       */
      calendar_owner_id?: number;
    };
    Activity_Task_base: {
      /**
       * Unique identifier for the *Task*
       */
      id?: number;
      /**
       * ETag for the *Task*
       */
      etag?: string;
    };
    DocumentSignatureRequest_base: {
      /**
       * Unique identifier for the *DocumentSignatureRequest*
       */
      id?: number;
      /**
       * ETag for the *DocumentSignatureRequest*
       */
      etag?: string;
      /**
       * The state of the signature request
       */
      request_state?: "DocumentSignatureRequest";
    };
    DocumentSignatureRequest: components["schemas"]["DocumentSignatureRequest_base"] & {
      [key: string]: any;
    };
    DocumentSignatureRequest_Events: {
      record?: components["schemas"]["DocumentSignatureRequest"];
      events?: components["schemas"]["EventDetail"][];
    };
    ExternalProperty_base: {
      /**
       * Unique identifier for the *ExternalProperty*
       */
      id?: number;
      /**
       * The name of the *ExternalProperty*
       */
      name?: string;
      /**
       * The value of the *ExternalProperty*
       */
      value?: string;
    };
    ExternalProperty: components["schemas"]["ExternalProperty_base"] & {
      subject?: components["schemas"]["PolymorphicObject_base"];
    };
    ExternalProperty_Events: {
      record?: components["schemas"]["ExternalProperty"];
      events?: components["schemas"]["EventDetail"][];
    };
    DocumentVersion_base: {
      /**
       * Unique identifier for the *DocumentVersion*
       */
      id?: number;
      /**
       * ETag for the *DocumentVersion*
       */
      etag?: string;
      /**
       * UUID associated with the DocumentVersion. UUID is required to mark a document fully uploaded.
       */
      uuid?: string;
      /**
       * The time the *DocumentVersion* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *DocumentVersion* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The uploaded file name of the DocumentVersion.
       */
      filename?: string;
      /**
       * The size of the the DocumentVersion in bytes.
       */
      size?: number;
      /**
       * The ordered number of when this DocumentVersion was uploaded.
       */
      version_number?: number;
      /**
       * A standard MIME type describing the format of the object data.
       */
      content_type?: string;
      /**
       * The time the DocumentVersion was received (as an ISO-8601 timestamp)
       */
      received_at?: string;
      /**
       * A signed URL for uploading the file in a single operation. It expires in 10 minutes. If the document is fully uploaded, the field is empty.
       */
      put_url?: string;
      /**
       * True if the DocumentVersion is uploaded. False if the DocumentVersion is being uploaded.
       */
      fully_uploaded?: boolean;
    };
    DocumentVersion: components["schemas"]["DocumentVersion_base"] & {
      creator?: components["schemas"]["User_base"];
      /**
       * MultipartHeader
       */
      put_headers?: components["schemas"]["MultipartHeader_base"][];
      /**
       * Multipart
       */
      multiparts?: components["schemas"]["Multipart"][];
    };
    DocumentVersion_Events: {
      record?: components["schemas"]["DocumentVersion"];
      events?: components["schemas"]["EventDetail"][];
    };
    User_base: {
      /**
       * Whether the *User* is the owner of the account
       */
      account_owner?: boolean;
      /**
       * Whether the *User* is a Clio Connect user
       */
      clio_connect?: boolean;
      /**
       * Whether the *User* is a default attendee for court rules events
       */
      court_rules_default_attendee?: boolean;
      /**
       * Default calendar id for *User*.
       */
      default_calendar_id?: number;
      /**
       * The email of the *User*
       */
      email?: string;
      /**
       * Whether the *User* is allowed to log in
       */
      enabled?: boolean;
      /**
       * ETag for the *User*
       */
      etag?: string;
      /**
       * The first name of the *User*
       */
      first_name?: string;
      /**
       * Unique identifier for the *User*
       */
      id?: number;
      /**
       * The initials of the *User*
       */
      initials?: string;
      /**
       * The last name of the *User*
       */
      last_name?: string;
      /**
       * The full name of the *User*
       */
      name?: string;
      /**
       * The primary phone number for the *User*.
       */
      phone_number?: string;
      /**
       * Default user activity rate for *User*.
       */
      rate?: number;
      /**
       * The subscription type of the *User*
       */
      subscription_type?: "Attorney" | "NonAttorney";
      /**
       * The selected time zone of the *User*
       */
      time_zone?: string;
      /**
       * An array of roles assigned to this *User*
       */
      roles?: string[];
      /**
       * The time the *User* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *User* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    User: components["schemas"]["User_base"] & {
      default_activity_description?: components["schemas"]["ActivityDescription_base"];
      /**
       * NotificationMethod
       */
      notification_methods?: components["schemas"]["NotificationMethod_base"][];
      account?: components["schemas"]["Account_base"];
      avatar?: components["schemas"]["Avatar_base"];
      contact?: components["schemas"]["Contact_base"];
      job_title?: components["schemas"]["JobTitle_base"];
    };
    User_Events: {
      record?: components["schemas"]["User"];
      events?: components["schemas"]["EventDetail"][];
    };
    UserShow: { data: components["schemas"]["User"] };
    UserList: {
      /**
       * User List Response
       */
      data: components["schemas"]["User"][];
    };
    UserListEvent: {
      /**
       * User Event List Response
       */
      data: components["schemas"]["User_Events"][];
    };
    Contact_base: {
      /**
       * Unique identifier for the *Contact*
       */
      id?: number;
      /**
       * ETag for the *Contact*
       */
      etag?: string;
      /**
       * The full name of the *Contact*
       */
      name?: string;
      /**
       * First name of the Person
       */
      first_name?: string;
      /**
       * Middle name of the Person
       */
      middle_name?: string;
      /**
       * Last name of the Person
       */
      last_name?: string;
      /**
       * The type of the *Contact*
       */
      type?: "Company" | "Person";
      /**
       * The time the *Contact* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Contact* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The prefix of the *Contact* (Mr, Mrs, etc)
       */
      prefix?: string;
      /**
       * The designated title of the *Contact*
       */
      title?: string;
      /**
       * The initials of the *Contact*
       */
      initials?: string;
      /**
       * Clio Connect email if the *Contact* is a ClioConnect User
       */
      clio_connect_email?: string;
      /**
       * A boolean indicating if the ability to modify this *Contacts Clio connect email is locked.
       */
      locked_clio_connect_email?: boolean;
      /**
       * The ID for the Clio Connect user associated with this *Contact*
       */
      client_connect_user_id?: number;
      /**
       * The primary email address associated with this *Contact*.
       */
      primary_email_address?: string;
      /**
       * The secondary email address associated with this *Contact*.
       */
      secondary_email_address?: string;
      /**
       * The primary phone number associated with this *Contact*.
       */
      primary_phone_number?: string;
      /**
       * The secondary phone number of the *Contact*.
       */
      secondary_phone_number?: string;
      /**
       * LEDES client id of the Contact
       */
      ledes_client_id?: string;
      /**
       * Whether or not the Contact is a client
       */
      is_client?: boolean;
      /**
       * Whether or not the Contact has matters shared as co-counsel
       */
      is_co_counsel?: boolean;
    };
    Contact: components["schemas"]["Contact_base"] & {
      /**
       * ActivityRate
       */
      activity_rates?: components["schemas"]["ActivityRate_base"][];
      /**
       * Address
       */
      addresses?: components["schemas"]["Address_base"][];
      /**
       * CustomFieldValue
       */
      custom_field_values?: components["schemas"]["CustomFieldValue"][];
      /**
       * CustomFieldSetAssociation
       */
      custom_field_set_associations?: components["schemas"]["CustomFieldSetAssociation_base"][];
      /**
       * EmailAddress
       */
      email_addresses?: components["schemas"]["EmailAddress_base"][];
      /**
       * InstantMessenger
       */
      instant_messengers?: components["schemas"]["InstantMessenger_base"][];
      /**
       * PhoneNumber
       */
      phone_numbers?: components["schemas"]["PhoneNumber_base"][];
      /**
       * WebSite
       */
      web_sites?: components["schemas"]["WebSite_base"][];
      /**
       * NotificationMethod
       */
      notification_methods?: components["schemas"]["NotificationMethod_base"][];
      /**
       * AccountBalance
       */
      account_balances?: components["schemas"]["AccountBalance_base"][];
      /**
       * Contact
       */
      related_contacts?: components["schemas"]["Contact_base"][];
      primary_work_address?: components["schemas"]["Address_base"];
      primary_address?: components["schemas"]["Address_base"];
      secondary_address?: components["schemas"]["Address_base"];
      company?: components["schemas"]["Contact_base"];
      avatar?: components["schemas"]["Avatar_base"];
      payment_profile?: components["schemas"]["PaymentProfile_base"];
      folder?: components["schemas"]["Folder_base"];
      co_counsel_rate?: components["schemas"]["ActivityRate_base"];
      primary_web_site?: components["schemas"]["WebSite_base"];
    };
    Contact_Events: {
      record?: components["schemas"]["Contact"];
      events?: components["schemas"]["EventDetail"][];
    };
    ContactShow: { data: components["schemas"]["Contact"] };
    ContactList: {
      /**
       * Contact List Response
       */
      data: components["schemas"]["Contact"][];
    };
    ContactListEvent: {
      /**
       * Contact Event List Response
       */
      data: components["schemas"]["Contact_Events"][];
    };
    Matter_base: {
      /**
       * Unique identifier for the *Matter*
       */
      id?: number;
      /**
       * ETag for the *Matter*
       */
      etag?: string;
      /**
       * The number given to the *Matter* within an account
       */
      number?: number;
      /**
       * The reference and label of the *Matter*. Depending on the account's manual_matter_numbering setting, this is either read only (generated) or customizable.
       */
      display_number?: string;
      /**
       * User defined custom number of the *Matter*
       */
      custom_number?: string;
      /**
       * The detailed description of the *Matter*
       */
      description?: string;
      /**
       * The current status of the *Matter*
       */
      status?: "Pending" | "Open" | "Closed";
      /**
       * The location of the *Matter*
       */
      location?: string;
      /**
       * Client Reference string for external uses
       */
      client_reference?: string;
      /**
       * Whether this matter is billable
       */
      billable?: boolean;
      /**
       * A unique Maildrop email address for the matter
       */
      maildrop_address?: string;
      /**
       * Billing method of this matter
       */
      billing_method?: "flat" | "contingency" | "hourly";
      /**
       * The date the matter was set to open (as a ISO-8601 date)
       */
      open_date?: string;
      /**
       * The date the matter was set to closed (as a ISO-8601 date)
       */
      close_date?: string;
      /**
       * The date the matter was set to pending (as a ISO-8601 date)
       */
      pending_date?: string;
      /**
       * The time the *Matter* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Matter* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * Whether the matter is currently shared with Clio Connect
       */
      shared?: boolean;
    };
    Matter: components["schemas"]["Matter_base"] & {
      client?: components["schemas"]["Contact_base"];
      contingency_fee?: components["schemas"]["ContingencyFee_base"];
      custom_rate?: components["schemas"]["MatterCustomRate"];
      folder?: components["schemas"]["Folder_base"];
      group?: components["schemas"]["Group_base"];
      matter_budget?: components["schemas"]["MatterBudget_base"];
      originating_attorney?: components["schemas"]["User_base"];
      practice_area?: components["schemas"]["PracticeArea_base"];
      responsible_attorney?: components["schemas"]["User_base"];
      statute_of_limitations?: components["schemas"]["Task_base"];
      user?: components["schemas"]["User_base"];
      import?: components["schemas"]["ImportDetail_base"];
      /**
       * AccountBalance
       */
      account_balances?: components["schemas"]["AccountBalance_base"][];
      /**
       * CustomFieldValue
       */
      custom_field_values?: components["schemas"]["CustomFieldValue"][];
      /**
       * CustomFieldSetAssociation
       */
      custom_field_set_associations?: components["schemas"]["CustomFieldSetAssociation_base"][];
      /**
       * Relationship
       */
      relationships?: components["schemas"]["Relationship_base"][];
      /**
       * TaskTemplateListInstace
       */
      task_template_list_instances?: components["schemas"]["TaskTemplateListInstace_base"][];
    };
    Matter_Events: {
      record?: components["schemas"]["Matter"];
      events?: components["schemas"]["EventDetail"][];
    };
    MatterShow: { data: components["schemas"]["Matter"] };
    MatterList: {
      /**
       * Matter List Response
       */
      data: components["schemas"]["Matter"][];
    };
    MatterListEvent: {
      /**
       * Matter Event List Response
       */
      data: components["schemas"]["Matter_Events"][];
    };
    Folder_base: {
      /**
       * Unique identifier for the *Folder*
       */
      id?: number;
      /**
       * ETag for the *Folder*
       */
      etag?: string;
      /**
       * The time the *Folder* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Folder* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The time the *Folder* was deleted (as a ISO-8601 timestamp)
       */
      deleted_at?: string;
      /**
       * The type of the *Folder*
       */
      type?: "Folder";
      /**
       * Whether or not the Folder is locked. Locked Folder cannot be modified
       */
      locked?: boolean;
      /**
       * The name of the Folder
       */
      name?: string;
      /**
       * Whether or not the Folder is the root folder. There is only one root folder per account
       */
      root?: boolean;
    };
    Folder: components["schemas"]["Folder_base"] & {
      parent?: components["schemas"]["Folder_base"];
      matter?: components["schemas"]["Matter_base"];
      contact?: components["schemas"]["Contact_base"];
      document_category?: components["schemas"]["DocumentCategory_base"];
      creator?: components["schemas"]["User_base"];
      latest_document_version?: components["schemas"]["DocumentVersion_base"];
      /**
       * ExternalProperty
       */
      external_properties?: components["schemas"]["ExternalProperty_base"][];
    };
    Folder_Events: {
      record?: components["schemas"]["Folder"];
      events?: components["schemas"]["EventDetail"][];
    };
    FolderShow: { data: components["schemas"]["Folder"] };
    FolderList: {
      /**
       * Folder List Response
       */
      data: components["schemas"]["Folder"][];
    };
    FolderListEvent: {
      /**
       * Folder Event List Response
       */
      data: components["schemas"]["Folder_Events"][];
    };
    Document_base: {
      /**
       * Unique identifier for the *Document*
       */
      id?: number;
      /**
       * ETag for the *Document*
       */
      etag?: string;
      /**
       * The time the *Document* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Document* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The time the *Document* was deleted (as a ISO-8601 timestamp)
       */
      deleted_at?: string;
      /**
       * The type of the *Document*
       */
      type?: "Document";
      /**
       * Whether or not the Document is locked. Locked Document cannot be modified
       */
      locked?: boolean;
      /**
       * The name of the Document
       */
      name?: string;
      /**
       * The time the last document version was received (as an ISO-8601 timestamp)
       */
      received_at?: string;
      /**
       * The uploaded file name of the latest document version.
       */
      filename?: string;
      /**
       * The file size
       */
      size?: number;
    };
    Document: components["schemas"]["Document_base"] & {
      parent?: components["schemas"]["Folder_base"];
      matter?: components["schemas"]["Matter_base"];
      contact?: components["schemas"]["Contact_base"];
      document_category?: components["schemas"]["DocumentCategory_base"];
      creator?: components["schemas"]["User_base"];
      latest_document_version?: components["schemas"]["DocumentVersion"];
      /**
       * ExternalProperty
       */
      external_properties?: components["schemas"]["ExternalProperty_base"][];
      /**
       * DocumentVersion
       */
      document_versions?: components["schemas"]["DocumentVersion_base"][];
    };
    Document_Events: {
      record?: components["schemas"]["Document"];
      events?: components["schemas"]["EventDetail"][];
    };
    DocumentShow: { data: components["schemas"]["Document"] };
    DocumentList: {
      /**
       * Document List Response
       */
      data: components["schemas"]["Document"][];
    };
    DocumentListEvent: {
      /**
       * Document Event List Response
       */
      data: components["schemas"]["Document_Events"][];
    };
    DocumentCategory_base: {
      /**
       * Unique identifier for the *DocumentCategory*
       */
      id?: number;
      /**
       * ETag for the *DocumentCategory*
       */
      etag?: string;
      /**
       * The name of the *DocumentCategory*
       */
      name?: string;
      /**
       * The time the *DocumentCategory* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *DocumentCategory* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    DocumentCategory: components["schemas"]["DocumentCategory_base"] & {
      [key: string]: any;
    };
    DocumentCategory_Events: {
      record?: components["schemas"]["DocumentCategory"];
      events?: components["schemas"]["EventDetail"][];
    };
    DocumentCategoryShow: { data: components["schemas"]["DocumentCategory"] };
    DocumentCategoryList: {
      /**
       * DocumentCategory List Response
       */
      data: components["schemas"]["DocumentCategory"][];
    };
    DocumentCategoryListEvent: {
      /**
       * DocumentCategory Event List Response
       */
      data: components["schemas"]["DocumentCategory_Events"][];
    };
    DocumentAutomation_base: {
      /**
       * Unique identifier for the *DocumentAutomation*
       */
      id?: number;
      /**
       * ETag for the *DocumentAutomation*
       */
      etag?: string;
      /**
       * A text description of what the automation is currently doing
       */
      state?: "null";
      /**
       * An array of what formats were requested
       */
      export_formats?: "pdf" | "original";
      /**
       * The name of the file being generated.
       */
      filename?: string;
      /**
       * The time the *DocumentAutomation* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *DocumentAutomation* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    DocumentAutomation: components["schemas"]["DocumentAutomation_base"] & {
      matter?: components["schemas"]["Matter_base"];
      document_template?: components["schemas"]["DocumentTemplate_base"];
      /**
       * Document
       */
      documents?: components["schemas"]["Document_base"][];
    };
    DocumentAutomation_Events: {
      record?: components["schemas"]["DocumentAutomation"];
      events?: components["schemas"]["EventDetail"][];
    };
    DocumentAutomationShow: {
      data: components["schemas"]["DocumentAutomation"];
    };
    DocumentAutomationList: {
      /**
       * DocumentAutomation List Response
       */
      data: components["schemas"]["DocumentAutomation"][];
    };
    DocumentAutomationListEvent: {
      /**
       * DocumentAutomation Event List Response
       */
      data: components["schemas"]["DocumentAutomation_Events"][];
    };
    Item_base: {
      /**
       * Unique identifier for the *Item*
       */
      id?: number;
      /**
       * ETag for the *Item*
       */
      etag?: string;
      /**
       * The time the *Item* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *Item* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The time the *Item* was deleted (as a ISO-8601 timestamp)
       */
      deleted_at?: string;
      /**
       * The type of the *Item*
       */
      type?: "Document" | "Folder";
      /**
       * Whether or not the Item is locked. Locked Item cannot be modified
       */
      locked?: boolean;
      /**
       * The name of the Item
       */
      name?: string;
    };
    Item: components["schemas"]["Item_base"] & {
      parent?: components["schemas"]["Folder_base"];
      matter?: components["schemas"]["Matter_base"];
      contact?: components["schemas"]["Contact_base"];
      document_category?: components["schemas"]["DocumentCategory_base"];
      creator?: components["schemas"]["User_base"];
      latest_document_version?: components["schemas"]["DocumentVersion_base"];
      /**
       * ExternalProperty
       */
      external_properties?: components["schemas"]["ExternalProperty_base"][];
    };
    Item_Events: {
      record?: components["schemas"]["Item"];
      events?: components["schemas"]["EventDetail"][];
    };
    ItemList: {
      /**
       * Item List Response
       */
      data: components["schemas"]["Item"][];
    };
    ItemListEvent: {
      /**
       * Item Event List Response
       */
      data: components["schemas"]["Item_Events"][];
    };
    DocumentArchive_base: {
      /**
       * Unique identifier for the *DocumentArchive*
       */
      id?: number;
      /**
       * ETag for the *DocumentArchive*
       */
      etag?: string;
      /**
       * The time the *DocumentArchive* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * The time the *DocumentArchive* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
      /**
       * The size of the DocumentArchive in bytes.
       */
      size?: number;
      /**
       * The percent completion of the DocumentArchive.
       */
      progress?: number;
      /**
       * The current state of the DocumentArchive.
       */
      state?: "not_started" | "queued" | "in_progress" | "completed" | "failed";
      /**
       * A message to indicate why the DocumentArchive didn't complete.
       */
      message?: string;
    };
    DocumentArchive: components["schemas"]["DocumentArchive_base"] & {
      [key: string]: any;
    };
    DocumentArchive_Events: {
      record?: components["schemas"]["DocumentArchive"];
      events?: components["schemas"]["EventDetail"][];
    };
    DocumentArchiveShow: { data: components["schemas"]["DocumentArchive"] };
    Comment_base: { [key: string]: any };
    Comment: components["schemas"]["Comment_base"] & {
      creator?: components["schemas"]["User_base"];
      document_version?: components["schemas"]["DocumentVersion_base"];
    };
    Comment_Events: {
      record?: components["schemas"]["Comment"];
      events?: components["schemas"]["EventDetail"][];
    };
    Author_base: {
      /**
       * Unique identifier for the *Author*
       */
      id?: number;
      /**
       * ETag for the *Author*
       */
      etag?: string;
      /**
       * The name of the *Author*
       */
      name?: string;
    };
    Author: components["schemas"]["Author_base"] & { [key: string]: any };
    Author_Events: {
      record?: components["schemas"]["Author"];
      events?: components["schemas"]["EventDetail"][];
    };
    AccessGrant_base: {
      /**
       * Unique identifier for the *AccessGrant*
       */
      id?: number;
      /**
       * The ID of the client item is shared with
       */
      contact_id?: number;
      /**
       * The name of the client item is shared with
       */
      contact_name?: string;
      /**
       * The email address of the client item is shared with
       */
      contact_email?: string;
      /**
       * The date at which the grant expires
       */
      expires_at?: string;
      /**
       * The ID of the user who shared the item
       */
      sharer_id?: number;
    };
    AccessGrant: components["schemas"]["AccessGrant_base"] & {
      [key: string]: any;
    };
    AccessGrant_Events: {
      record?: components["schemas"]["AccessGrant"];
      events?: components["schemas"]["EventDetail"][];
    };
    Ledger_Transaction_base: { [key: string]: any };
    Ledger_Transaction: components["schemas"]["Ledger_Transaction_base"] & {
      contact?: components["schemas"]["Contact_base"];
      /**
       * Ledger::Entry
       */
      ledger_entries?: components["schemas"]["Ledger_Entry_base"][];
    };
    Ledger_Transaction_Events: {
      record?: components["schemas"]["Ledger_Transaction"];
      events?: components["schemas"]["EventDetail"][];
    };
    Ledger_Entry_base: { [key: string]: any };
    Ledger_Entry: components["schemas"]["Ledger_Entry_base"] & {
      ledger_account?: components["schemas"]["Ledger_Account_base"];
      matter?: components["schemas"]["Matter_base"];
    };
    Ledger_Entry_Events: {
      record?: components["schemas"]["Ledger_Entry"];
      events?: components["schemas"]["EventDetail"][];
    };
    Ledger_Account_base: { [key: string]: any };
    Ledger_Account: components["schemas"]["Ledger_Account_base"] & {
      [key: string]: any;
    };
    Ledger_Account_Events: {
      record?: components["schemas"]["Ledger_Account"];
      events?: components["schemas"]["EventDetail"][];
    };
    ManageMigration_Migration_base: {
      /**
       * The id of the account associated with the *ManageMigration::Migration*
       */
      account_id?: number;
      /**
       * The time the *ManageMigration::Migration* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * Unique identifier for the *ManageMigration::Migration*
       */
      id?: number;
      /**
       * The current status of the *ManageMigration::Migration*
       */
      status?: "active" | "imported" | "failed";
      /**
       * The time the *ManageMigration::Migration* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    ManageMigration_Migration: components["schemas"]["ManageMigration_Migration_base"] & {
      /**
       * ManageMigration::MigrationPart
       */
      migration_parts?: components["schemas"]["ManageMigration_MigrationPart_base"][];
    };
    ManageMigration_Migration_Events: {
      record?: components["schemas"]["ManageMigration_Migration"];
      events?: components["schemas"]["EventDetail"][];
    };
    ManageMigration_MigrationFile_base: {
      /**
       * The id of the account associated with the *ManageMigration::MigrationFile*
       */
      account_id?: number;
      /**
       * The time the *ManageMigration::MigrationFile* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * Name of the file
       */
      file_name?: string;
      /**
       * Size of the file in bytes
       */
      file_size?: number;
      /**
       * Either source file or transform file
       */
      file_type?: "source" | "transform";
      /**
       * Unique identifier for the *ManageMigration::MigrationFile*
       */
      id?: number;
      /**
       * Time that the file was successfully imported
       */
      imported_at?: string;
      /**
       * The time the *ManageMigration::MigrationFile* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    ManageMigration_MigrationFile: components["schemas"]["ManageMigration_MigrationFile_base"] & {
      migration_part?: components["schemas"]["ManageMigration_MigrationPart_base"];
    };
    ManageMigration_MigrationFile_Events: {
      record?: components["schemas"]["ManageMigration_MigrationFile"];
      events?: components["schemas"]["EventDetail"][];
    };
    ManageMigration_MigrationPart_base: {
      /**
       * The id of the account associated with the *ManageMigration::MigrationPart*
       */
      account_id?: number;
      /**
       * The time the *ManageMigration::MigrationPart* was created (as a ISO-8601 timestamp)
       */
      created_at?: string;
      /**
       * Unique identifier for the *ManageMigration::MigrationPart*
       */
      id?: number;
      /**
       * The id of the migration
       */
      manage_migration_migration_id?: number;
      /**
       * The model type to be imported
       */
      model_type?:
        | "Activity"
        | "Calendar"
        | "CalendarEntry"
        | "Contact"
        | "CustomField"
        | "Document"
        | "Matter"
        | "Note"
        | "Task"
        | "User";
      /**
       * The number of objects imported
       */
      records_imported?: number;
      /**
       * The current status of the *ManageMigration::MigrationPart*
       */
      status?:
        | "not_started"
        | "transforming"
        | "validating"
        | "ready_for_import"
        | "queued"
        | "importing"
        | "imported"
        | "failed";
      /**
       * The total number of objects to import for the Migration Part
       */
      total_records?: number;
      /**
       * The time the *ManageMigration::MigrationPart* was last updated (as a ISO-8601 timestamp)
       */
      updated_at?: string;
    };
    ManageMigration_MigrationPart: components["schemas"]["ManageMigration_MigrationPart_base"] & {
      /**
       * ManageMigration::MigrationFile
       */
      migration_files?: components["schemas"]["ManageMigration_MigrationFile_base"][];
    };
    ManageMigration_MigrationPart_Events: {
      record?: components["schemas"]["ManageMigration_MigrationPart"];
      events?: components["schemas"]["EventDetail"][];
    };
    Insights_Metric_base: { [key: string]: any };
    Insights_Metric: components["schemas"]["Insights_Metric_base"] & {
      [key: string]: any;
    };
    Insights_Metric_Events: {
      record?: components["schemas"]["Insights_Metric"];
      events?: components["schemas"]["EventDetail"][];
    };
  };
}
